{
    "kind": "NodeList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/nodes",
        "resourceVersion": "11745"
    },
    "items": [
        {
            "metadata": {
                "name": "minikube",
                "selfLink": "/api/v1/nodes/minikube",
                "uid": "652b882a-88e0-4bb6-b770-543181d08847",
                "resourceVersion": "11682",
                "creationTimestamp": "2020-11-12T19:50:54Z",
                "labels": {
                    "beta.kubernetes.io/arch": "amd64",
                    "beta.kubernetes.io/os": "linux",
                    "kubernetes.io/arch": "amd64",
                    "kubernetes.io/hostname": "minikube",
                    "kubernetes.io/os": "linux",
                    "minikube.k8s.io/commit": "2c82918e2347188e21c4e44c8056fc80408bce10",
                    "minikube.k8s.io/name": "minikube",
                    "minikube.k8s.io/updated_at": "2020_11_12T19_50_57_0700",
                    "minikube.k8s.io/version": "v1.14.2",
                    "node-role.kubernetes.io/master": ""
                },
                "annotations": {
                    "kubeadm.alpha.kubernetes.io/cri-socket": "/var/run/dockershim.sock",
                    "node.alpha.kubernetes.io/ttl": "0",
                    "volumes.kubernetes.io/controller-managed-attach-detach": "true"
                },
                "managedFields": [
                    {
                        "manager": "kubeadm",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:50:56Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:kubeadm.alpha.kubernetes.io/cri-socket": {}
                                },
                                "f:labels": {
                                    "f:node-role.kubernetes.io/master": {}
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubectl-label",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:50:57Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:labels": {
                                    "f:minikube.k8s.io/commit": {},
                                    "f:minikube.k8s.io/name": {},
                                    "f:minikube.k8s.io/updated_at": {},
                                    "f:minikube.k8s.io/version": {}
                                }
                            }
                        }
                    },
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:51:03Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:node.alpha.kubernetes.io/ttl": {}
                                },
                                "f:labels": {
                                    "f:beta.kubernetes.io/arch": {},
                                    "f:beta.kubernetes.io/os": {}
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-13T07:42:00Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:volumes.kubernetes.io/controller-managed-attach-detach": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:kubernetes.io/arch": {},
                                    "f:kubernetes.io/hostname": {},
                                    "f:kubernetes.io/os": {}
                                }
                            },
                            "f:status": {
                                "f:addresses": {
                                    ".": {},
                                    "k:{\"type\":\"Hostname\"}": {
                                        ".": {},
                                        "f:address": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"InternalIP\"}": {
                                        ".": {},
                                        "f:address": {},
                                        "f:type": {}
                                    }
                                },
                                "f:allocatable": {
                                    ".": {},
                                    "f:cpu": {},
                                    "f:ephemeral-storage": {},
                                    "f:hugepages-2Mi": {},
                                    "f:memory": {},
                                    "f:pods": {}
                                },
                                "f:capacity": {
                                    ".": {},
                                    "f:cpu": {},
                                    "f:ephemeral-storage": {},
                                    "f:hugepages-2Mi": {},
                                    "f:memory": {},
                                    "f:pods": {}
                                },
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"DiskPressure\"}": {
                                        ".": {},
                                        "f:lastHeartbeatTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"MemoryPressure\"}": {
                                        ".": {},
                                        "f:lastHeartbeatTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"PIDPressure\"}": {
                                        ".": {},
                                        "f:lastHeartbeatTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastHeartbeatTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:daemonEndpoints": {
                                    "f:kubeletEndpoint": {
                                        "f:Port": {}
                                    }
                                },
                                "f:images": {},
                                "f:nodeInfo": {
                                    "f:architecture": {},
                                    "f:bootID": {},
                                    "f:containerRuntimeVersion": {},
                                    "f:kernelVersion": {},
                                    "f:kubeProxyVersion": {},
                                    "f:kubeletVersion": {},
                                    "f:machineID": {},
                                    "f:operatingSystem": {},
                                    "f:osImage": {},
                                    "f:systemUUID": {}
                                }
                            }
                        }
                    }
                ]
            },
            "spec": {},
            "status": {
                "capacity": {
                    "cpu": "2",
                    "ephemeral-storage": "17784752Ki",
                    "hugepages-2Mi": "0",
                    "memory": "3934664Ki",
                    "pods": "110"
                },
                "allocatable": {
                    "cpu": "2",
                    "ephemeral-storage": "17784752Ki",
                    "hugepages-2Mi": "0",
                    "memory": "3934664Ki",
                    "pods": "110"
                },
                "conditions": [
                    {
                        "type": "MemoryPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2020-11-13T07:42:00Z",
                        "lastTransitionTime": "2020-11-12T19:50:50Z",
                        "reason": "KubeletHasSufficientMemory",
                        "message": "kubelet has sufficient memory available"
                    },
                    {
                        "type": "DiskPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2020-11-13T07:42:00Z",
                        "lastTransitionTime": "2020-11-12T19:50:50Z",
                        "reason": "KubeletHasNoDiskPressure",
                        "message": "kubelet has no disk pressure"
                    },
                    {
                        "type": "PIDPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2020-11-13T07:42:00Z",
                        "lastTransitionTime": "2020-11-12T19:50:50Z",
                        "reason": "KubeletHasSufficientPID",
                        "message": "kubelet has sufficient PID available"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastHeartbeatTime": "2020-11-13T07:42:00Z",
                        "lastTransitionTime": "2020-11-12T19:50:54Z",
                        "reason": "KubeletReady",
                        "message": "kubelet is posting ready status"
                    }
                ],
                "addresses": [
                    {
                        "type": "InternalIP",
                        "address": "192.168.39.244"
                    },
                    {
                        "type": "Hostname",
                        "address": "minikube"
                    }
                ],
                "daemonEndpoints": {
                    "kubeletEndpoint": {
                        "Port": 10250
                    }
                },
                "nodeInfo": {
                    "machineID": "39600a8b44464d3c9d045727e331517c",
                    "systemUUID": "39600a8b-4446-4d3c-9d04-5727e331517c",
                    "bootID": "f78df0ee-b2e0-43dd-ab44-cc5dece86a4a",
                    "kernelVersion": "4.19.114",
                    "osImage": "Buildroot 2020.02.6",
                    "containerRuntimeVersion": "docker://19.3.12",
                    "kubeletVersion": "v1.19.2",
                    "kubeProxyVersion": "v1.19.2",
                    "operatingSystem": "linux",
                    "architecture": "amd64"
                },
                "images": [
                    {
                        "names": [
                            "k8s.gcr.io/etcd@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2",
                            "k8s.gcr.io/etcd:3.4.13-0"
                        ],
                        "sizeBytes": 253392289
                    },
                    {
                        "names": [
                            "kubernetesui/dashboard@sha256:45ef224759bc50c84445f233fffae4aa3bdaec705cb5ee4bfe36d183b270b45d",
                            "kubernetesui/dashboard:v2.0.3"
                        ],
                        "sizeBytes": 224634157
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-apiserver@sha256:fc905eab708c6abbdf0ef0d47667592b948fea3adf31d71b19b5205340d00011",
                            "k8s.gcr.io/kube-apiserver:v1.19.2"
                        ],
                        "sizeBytes": 118778218
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-proxy@sha256:fa7c9d19680704e246873eb600c02fa95167d5c58e56d56ba9ed30b7c4150ac1",
                            "k8s.gcr.io/kube-proxy:v1.19.2"
                        ],
                        "sizeBytes": 117686573
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-controller-manager@sha256:c94b98d9f79bdfe33010c313891d99ed50858d6f04ceef865e7904c338dad913",
                            "k8s.gcr.io/kube-controller-manager:v1.19.2"
                        ],
                        "sizeBytes": 110778730
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-scheduler@sha256:bb058c7394fad4d968d366b8b372698a1144a1c3c6de52cdf46ff050ccfd31ff",
                            "k8s.gcr.io/kube-scheduler:v1.19.2"
                        ],
                        "sizeBytes": 45656426
                    },
                    {
                        "names": [
                            "k8s.gcr.io/coredns@sha256:73ca82b4ce829766d4f1f10947c3a338888f876fbed0540dc849c89ff256e90c",
                            "k8s.gcr.io/coredns:1.7.0"
                        ],
                        "sizeBytes": 45227747
                    },
                    {
                        "names": [
                            "kubernetesui/metrics-scraper@sha256:555981a24f184420f3be0c79d4efb6c948a85cfce84034f85a563f4151a81cbf",
                            "kubernetesui/metrics-scraper:v1.0.4"
                        ],
                        "sizeBytes": 36937728
                    },
                    {
                        "names": [
                            "gcr.io/k8s-minikube/storage-provisioner@sha256:5d8c9e69200846ff740bca872d681d2a736014386e4006fd26c4bf24ef7813ec",
                            "gcr.io/k8s-minikube/storage-provisioner:v3"
                        ],
                        "sizeBytes": 29667328
                    },
                    {
                        "names": [
                            "k8s.gcr.io/pause@sha256:927d98197ec1141a368550822d18fa1c60bdae27b78b0c004f705f548c07814f",
                            "k8s.gcr.io/pause:3.2"
                        ],
                        "sizeBytes": 682696
                    }
                ]
            }
        }
    ]
}
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/events",
        "resourceVersion": "11745"
    },
    "items": [
        {
            "metadata": {
                "name": "kube-apiserver-minikube.1647014eee67f708",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-apiserver-minikube.1647014eee67f708",
                "uid": "483b010c-5c20-4c97-8296-24663ec5045c",
                "resourceVersion": "11689",
                "creationTimestamp": "2020-11-13T07:40:30Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-13T07:42:10Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-apiserver-minikube",
                "uid": "bac38faedfabd967b27122b71152d475",
                "apiVersion": "v1",
                "fieldPath": "spec.containers{kube-apiserver}"
            },
            "reason": "Unhealthy",
            "message": "Readiness probe failed: HTTP probe failed with statuscode: 500",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-11-13T07:40:30Z",
            "lastTimestamp": "2020-11-13T07:42:10Z",
            "count": 3,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        }
    ]
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/replicationcontrollers",
        "resourceVersion": "11745"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/services",
        "resourceVersion": "11745"
    },
    "items": [
        {
            "metadata": {
                "name": "kube-dns",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/kube-dns",
                "uid": "02a0b81c-1ccc-4820-ac0a-0f3a7e13fe95",
                "resourceVersion": "216",
                "creationTimestamp": "2020-11-12T19:50:57Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "KubeDNS"
                },
                "annotations": {
                    "prometheus.io/port": "9153",
                    "prometheus.io/scrape": "true"
                },
                "managedFields": [
                    {
                        "manager": "kubeadm",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:50:57Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:prometheus.io/port": {},
                                    "f:prometheus.io/scrape": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {},
                                    "f:kubernetes.io/cluster-service": {},
                                    "f:kubernetes.io/name": {}
                                }
                            },
                            "f:spec": {
                                "f:clusterIP": {},
                                "f:ports": {
                                    ".": {},
                                    "k:{\"port\":53,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    },
                                    "k:{\"port\":53,\"protocol\":\"UDP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    },
                                    "k:{\"port\":9153,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    }
                                },
                                "f:selector": {
                                    ".": {},
                                    "f:k8s-app": {}
                                },
                                "f:sessionAffinity": {},
                                "f:type": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "ports": [
                    {
                        "name": "dns",
                        "protocol": "UDP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "dns-tcp",
                        "protocol": "TCP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "metrics",
                        "protocol": "TCP",
                        "port": 9153,
                        "targetPort": 9153
                    }
                ],
                "selector": {
                    "k8s-app": "kube-dns"
                },
                "clusterIP": "10.96.0.10",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/daemonsets",
        "resourceVersion": "11745"
    },
    "items": [
        {
            "metadata": {
                "name": "kube-proxy",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/daemonsets/kube-proxy",
                "uid": "65fca070-6e14-4af9-91fd-3e1a78d6e857",
                "resourceVersion": "388",
                "generation": 1,
                "creationTimestamp": "2020-11-12T19:50:57Z",
                "labels": {
                    "k8s-app": "kube-proxy"
                },
                "annotations": {
                    "deprecated.daemonset.template.generation": "1"
                },
                "managedFields": [
                    {
                        "manager": "kubeadm",
                        "operation": "Update",
                        "apiVersion": "apps/v1",
                        "time": "2020-11-12T19:50:57Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:deprecated.daemonset.template.generation": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {}
                                }
                            },
                            "f:spec": {
                                "f:revisionHistoryLimit": {},
                                "f:selector": {
                                    "f:matchLabels": {
                                        ".": {},
                                        "f:k8s-app": {}
                                    }
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:k8s-app": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"kube-proxy\"}": {
                                                ".": {},
                                                "f:command": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"NODE_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {
                                                                ".": {},
                                                                "f:apiVersion": {},
                                                                "f:fieldPath": {}
                                                            }
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:privileged": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/lib/modules\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {},
                                                        "f:readOnly": {}
                                                    },
                                                    "k:{\"mountPath\":\"/run/xtables.lock\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/var/lib/kube-proxy\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:hostNetwork": {},
                                        "f:nodeSelector": {
                                            ".": {},
                                            "f:kubernetes.io/os": {}
                                        },
                                        "f:priorityClassName": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:tolerations": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"kube-proxy\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"lib-modules\"}": {
                                                ".": {},
                                                "f:hostPath": {
                                                    ".": {},
                                                    "f:path": {},
                                                    "f:type": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"xtables-lock\"}": {
                                                ".": {},
                                                "f:hostPath": {
                                                    ".": {},
                                                    "f:path": {},
                                                    "f:type": {}
                                                },
                                                "f:name": {}
                                            }
                                        }
                                    }
                                },
                                "f:updateStrategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                }
                            }
                        }
                    },
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "apps/v1",
                        "time": "2020-11-12T19:51:08Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:currentNumberScheduled": {},
                                "f:desiredNumberScheduled": {},
                                "f:numberAvailable": {},
                                "f:numberReady": {},
                                "f:observedGeneration": {},
                                "f:updatedNumberScheduled": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-proxy"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-proxy"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "kube-proxy",
                                "configMap": {
                                    "name": "kube-proxy",
                                    "defaultMode": 420
                                }
                            },
                            {
                                "name": "xtables-lock",
                                "hostPath": {
                                    "path": "/run/xtables.lock",
                                    "type": "FileOrCreate"
                                }
                            },
                            {
                                "name": "lib-modules",
                                "hostPath": {
                                    "path": "/lib/modules",
                                    "type": ""
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "kube-proxy",
                                "image": "k8s.gcr.io/kube-proxy:v1.19.2",
                                "command": [
                                    "/usr/local/bin/kube-proxy",
                                    "--config=/var/lib/kube-proxy/config.conf",
                                    "--hostname-override=$(NODE_NAME)"
                                ],
                                "env": [
                                    {
                                        "name": "NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "kube-proxy",
                                        "mountPath": "/var/lib/kube-proxy"
                                    },
                                    {
                                        "name": "xtables-lock",
                                        "mountPath": "/run/xtables.lock"
                                    },
                                    {
                                        "name": "lib-modules",
                                        "readOnly": true,
                                        "mountPath": "/lib/modules"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "privileged": true
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "kube-proxy",
                        "serviceAccount": "kube-proxy",
                        "hostNetwork": true,
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-node-critical"
                    }
                },
                "updateStrategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1
                    }
                },
                "revisionHistoryLimit": 10
            },
            "status": {
                "currentNumberScheduled": 1,
                "numberMisscheduled": 0,
                "desiredNumberScheduled": 1,
                "numberReady": 1,
                "observedGeneration": 1,
                "updatedNumberScheduled": 1,
                "numberAvailable": 1
            }
        }
    ]
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments",
        "resourceVersion": "11745"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/coredns",
                "uid": "73e963c7-fcf5-4567-9300-b68a35321b7b",
                "resourceVersion": "396",
                "generation": 2,
                "creationTimestamp": "2020-11-12T19:50:57Z",
                "labels": {
                    "k8s-app": "kube-dns"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1"
                },
                "managedFields": [
                    {
                        "manager": "kubeadm",
                        "operation": "Update",
                        "apiVersion": "apps/v1",
                        "time": "2020-11-12T19:50:57Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {
                                    "f:matchLabels": {
                                        ".": {},
                                        "f:k8s-app": {}
                                    }
                                },
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:k8s-app": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"coredns\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":53,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":53,\"protocol\":\"UDP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9153,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:add": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/etc/coredns\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {},
                                                        "f:readOnly": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:nodeSelector": {
                                            ".": {},
                                            "f:kubernetes.io/os": {}
                                        },
                                        "f:priorityClassName": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:tolerations": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"config-volume\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:items": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "apps/v1",
                        "time": "2020-11-12T19:51:10Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "k8s.gcr.io/coredns:1.7.0",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/ready",
                                        "port": 8181,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1,
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 2,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-11-12T19:51:03Z",
                        "lastTransitionTime": "2020-11-12T19:51:03Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2020-11-12T19:51:10Z",
                        "lastTransitionTime": "2020-11-12T19:51:03Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"coredns-f9fd979d6\" has successfully progressed."
                    }
                ]
            }
        }
    ]
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets",
        "resourceVersion": "11745"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-f9fd979d6",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/coredns-f9fd979d6",
                "uid": "52d07323-75d8-467d-b76e-808039741388",
                "resourceVersion": "394",
                "generation": 1,
                "creationTimestamp": "2020-11-12T19:51:03Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "f9fd979d6"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "coredns",
                        "uid": "73e963c7-fcf5-4567-9300-b68a35321b7b",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "apps/v1",
                        "time": "2020-11-12T19:51:10Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:deployment.kubernetes.io/desired-replicas": {},
                                    "f:deployment.kubernetes.io/max-replicas": {},
                                    "f:deployment.kubernetes.io/revision": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {},
                                    "f:pod-template-hash": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"73e963c7-fcf5-4567-9300-b68a35321b7b\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:blockOwnerDeletion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:replicas": {},
                                "f:selector": {
                                    "f:matchLabels": {
                                        ".": {},
                                        "f:k8s-app": {},
                                        "f:pod-template-hash": {}
                                    }
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:k8s-app": {},
                                            "f:pod-template-hash": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"coredns\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":53,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":53,\"protocol\":\"UDP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9153,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:add": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/etc/coredns\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {},
                                                        "f:readOnly": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:nodeSelector": {
                                            ".": {},
                                            "f:kubernetes.io/os": {}
                                        },
                                        "f:priorityClassName": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:tolerations": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"config-volume\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:items": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:fullyLabeledReplicas": {},
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns",
                        "pod-template-hash": "f9fd979d6"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns",
                            "pod-template-hash": "f9fd979d6"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "k8s.gcr.io/coredns:1.7.0",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/ready",
                                        "port": 8181,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        }
    ]
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/pods",
        "resourceVersion": "11745"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-f9fd979d6-28hnd",
                "generateName": "coredns-f9fd979d6-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/coredns-f9fd979d6-28hnd",
                "uid": "5980951a-385d-426d-be7b-60ed38ff09e8",
                "resourceVersion": "392",
                "creationTimestamp": "2020-11-12T19:51:03Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "f9fd979d6"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "coredns-f9fd979d6",
                        "uid": "52d07323-75d8-467d-b76e-808039741388",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:51:03Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:generateName": {},
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {},
                                    "f:pod-template-hash": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"52d07323-75d8-467d-b76e-808039741388\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:blockOwnerDeletion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"coredns\"}": {
                                        ".": {},
                                        "f:args": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:livenessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:name": {},
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"containerPort\":53,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:containerPort": {},
                                                "f:name": {},
                                                "f:protocol": {}
                                            },
                                            "k:{\"containerPort\":53,\"protocol\":\"UDP\"}": {
                                                ".": {},
                                                "f:containerPort": {},
                                                "f:name": {},
                                                "f:protocol": {}
                                            },
                                            "k:{\"containerPort\":9153,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:containerPort": {},
                                                "f:name": {},
                                                "f:protocol": {}
                                            }
                                        },
                                        "f:readinessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:resources": {
                                            ".": {},
                                            "f:limits": {
                                                ".": {},
                                                "f:memory": {}
                                            },
                                            "f:requests": {
                                                ".": {},
                                                "f:cpu": {},
                                                "f:memory": {}
                                            }
                                        },
                                        "f:securityContext": {
                                            ".": {},
                                            "f:allowPrivilegeEscalation": {},
                                            "f:capabilities": {
                                                ".": {},
                                                "f:add": {},
                                                "f:drop": {}
                                            },
                                            "f:readOnlyRootFilesystem": {}
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/etc/coredns\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:nodeSelector": {
                                    ".": {},
                                    "f:kubernetes.io/os": {}
                                },
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:serviceAccount": {},
                                "f:serviceAccountName": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"config-volume\"}": {
                                        ".": {},
                                        "f:configMap": {
                                            ".": {},
                                            "f:defaultMode": {},
                                            "f:items": {},
                                            "f:name": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:51:10Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:conditions": {
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"172.17.0.2\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "config-volume",
                        "configMap": {
                            "name": "coredns",
                            "items": [
                                {
                                    "key": "Corefile",
                                    "path": "Corefile"
                                }
                            ],
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "coredns-token-2rhdh",
                        "secret": {
                            "secretName": "coredns-token-2rhdh",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "coredns",
                        "image": "k8s.gcr.io/coredns:1.7.0",
                        "args": [
                            "-conf",
                            "/etc/coredns/Corefile"
                        ],
                        "ports": [
                            {
                                "name": "dns",
                                "containerPort": 53,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp",
                                "containerPort": 53,
                                "protocol": "TCP"
                            },
                            {
                                "name": "metrics",
                                "containerPort": 9153,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "memory": "170Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "70Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "config-volume",
                                "readOnly": true,
                                "mountPath": "/etc/coredns"
                            },
                            {
                                "name": "coredns-token-2rhdh",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/ready",
                                "port": 8181,
                                "scheme": "HTTP"
                            },
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "capabilities": {
                                "add": [
                                    "NET_BIND_SERVICE"
                                ],
                                "drop": [
                                    "all"
                                ]
                            },
                            "readOnlyRootFilesystem": true,
                            "allowPrivilegeEscalation": false
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "nodeSelector": {
                    "kubernetes.io/os": "linux"
                },
                "serviceAccountName": "coredns",
                "serviceAccount": "coredns",
                "nodeName": "minikube",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node-role.kubernetes.io/master",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:03Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:07Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:07Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:03Z"
                    }
                ],
                "hostIP": "192.168.39.244",
                "podIP": "172.17.0.2",
                "podIPs": [
                    {
                        "ip": "172.17.0.2"
                    }
                ],
                "startTime": "2020-11-12T19:51:03Z",
                "containerStatuses": [
                    {
                        "name": "coredns",
                        "state": {
                            "running": {
                                "startedAt": "2020-11-12T19:51:05Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/coredns:1.7.0",
                        "imageID": "docker-pullable://k8s.gcr.io/coredns@sha256:73ca82b4ce829766d4f1f10947c3a338888f876fbed0540dc849c89ff256e90c",
                        "containerID": "docker://a5d2b1c6530f85221addc480477b66d927d5d1393dc2b726219afd08191bfbd3",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "etcd-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/etcd-minikube",
                "uid": "30ecb7d5-6220-4e3e-b502-ebfab0fae423",
                "resourceVersion": "443",
                "creationTimestamp": "2020-11-12T19:51:03Z",
                "labels": {
                    "component": "etcd",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubeadm.kubernetes.io/etcd.advertise-client-urls": "https://192.168.39.244:2379",
                    "kubernetes.io/config.hash": "3ce551540c425ef4cf5d3f4a0674a967",
                    "kubernetes.io/config.mirror": "3ce551540c425ef4cf5d3f4a0674a967",
                    "kubernetes.io/config.seen": "2020-11-12T19:50:57.283136464Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "652b882a-88e0-4bb6-b770-543181d08847",
                        "controller": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:52:09Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubeadm.kubernetes.io/etcd.advertise-client-urls": {},
                                    "f:kubernetes.io/config.hash": {},
                                    "f:kubernetes.io/config.mirror": {},
                                    "f:kubernetes.io/config.seen": {},
                                    "f:kubernetes.io/config.source": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:component": {},
                                    "f:tier": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"652b882a-88e0-4bb6-b770-543181d08847\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"etcd\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:livenessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:name": {},
                                        "f:resources": {},
                                        "f:startupProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/var/lib/minikube/certs/etcd\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            },
                                            "k:{\"mountPath\":\"/var/lib/minikube/etcd\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:nodeName": {},
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"etcd-certs\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"etcd-data\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            },
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"192.168.39.244\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "etcd-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs/etcd",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "etcd-data",
                        "hostPath": {
                            "path": "/var/lib/minikube/etcd",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "etcd",
                        "image": "k8s.gcr.io/etcd:3.4.13-0",
                        "command": [
                            "etcd",
                            "--advertise-client-urls=https://192.168.39.244:2379",
                            "--cert-file=/var/lib/minikube/certs/etcd/server.crt",
                            "--client-cert-auth=true",
                            "--data-dir=/var/lib/minikube/etcd",
                            "--initial-advertise-peer-urls=https://192.168.39.244:2380",
                            "--initial-cluster=minikube=https://192.168.39.244:2380",
                            "--key-file=/var/lib/minikube/certs/etcd/server.key",
                            "--listen-client-urls=https://127.0.0.1:2379,https://192.168.39.244:2379",
                            "--listen-metrics-urls=http://127.0.0.1:2381",
                            "--listen-peer-urls=https://192.168.39.244:2380",
                            "--name=minikube",
                            "--peer-cert-file=/var/lib/minikube/certs/etcd/peer.crt",
                            "--peer-client-cert-auth=true",
                            "--peer-key-file=/var/lib/minikube/certs/etcd/peer.key",
                            "--peer-trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt",
                            "--proxy-refresh-interval=70000",
                            "--snapshot-count=10000",
                            "--trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt"
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "etcd-data",
                                "mountPath": "/var/lib/minikube/etcd"
                            },
                            {
                                "name": "etcd-certs",
                                "mountPath": "/var/lib/minikube/certs/etcd"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 2381,
                                "host": "127.0.0.1",
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 2381,
                                "host": "127.0.0.1",
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:03Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:52:09Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:52:09Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:03Z"
                    }
                ],
                "hostIP": "192.168.39.244",
                "podIP": "192.168.39.244",
                "podIPs": [
                    {
                        "ip": "192.168.39.244"
                    }
                ],
                "startTime": "2020-11-12T19:51:03Z",
                "containerStatuses": [
                    {
                        "name": "etcd",
                        "state": {
                            "running": {
                                "startedAt": "2020-11-12T19:50:50Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/etcd:3.4.13-0",
                        "imageID": "docker-pullable://k8s.gcr.io/etcd@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2",
                        "containerID": "docker://64e7aa94f9a4498eef103e3a1276d739ca5c607d80fb52839433bafea1eee2f7",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "kube-apiserver-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-apiserver-minikube",
                "uid": "efffdf1f-5cff-4a5b-bd4f-4bae8a183282",
                "resourceVersion": "399",
                "creationTimestamp": "2020-11-12T19:51:03Z",
                "labels": {
                    "component": "kube-apiserver",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint": "192.168.39.244:8443",
                    "kubernetes.io/config.hash": "bac38faedfabd967b27122b71152d475",
                    "kubernetes.io/config.mirror": "bac38faedfabd967b27122b71152d475",
                    "kubernetes.io/config.seen": "2020-11-12T19:50:57.283140932Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "652b882a-88e0-4bb6-b770-543181d08847",
                        "controller": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:51:11Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint": {},
                                    "f:kubernetes.io/config.hash": {},
                                    "f:kubernetes.io/config.mirror": {},
                                    "f:kubernetes.io/config.seen": {},
                                    "f:kubernetes.io/config.source": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:component": {},
                                    "f:tier": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"652b882a-88e0-4bb6-b770-543181d08847\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"kube-apiserver\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:livenessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:name": {},
                                        "f:readinessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:resources": {
                                            ".": {},
                                            "f:requests": {
                                                ".": {},
                                                "f:cpu": {}
                                            }
                                        },
                                        "f:startupProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/etc/ssl/certs\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/usr/share/ca-certificates\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/var/lib/minikube/certs\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:nodeName": {},
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"ca-certs\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"k8s-certs\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"usr-share-ca-certificates\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            },
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"192.168.39.244\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "ca-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "k8s-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "usr-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-apiserver",
                        "image": "k8s.gcr.io/kube-apiserver:v1.19.2",
                        "command": [
                            "kube-apiserver",
                            "--advertise-address=192.168.39.244",
                            "--allow-privileged=true",
                            "--authorization-mode=Node,RBAC",
                            "--client-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota",
                            "--enable-bootstrap-token-auth=true",
                            "--etcd-cafile=/var/lib/minikube/certs/etcd/ca.crt",
                            "--etcd-certfile=/var/lib/minikube/certs/apiserver-etcd-client.crt",
                            "--etcd-keyfile=/var/lib/minikube/certs/apiserver-etcd-client.key",
                            "--etcd-servers=https://127.0.0.1:2379",
                            "--insecure-port=0",
                            "--kubelet-client-certificate=/var/lib/minikube/certs/apiserver-kubelet-client.crt",
                            "--kubelet-client-key=/var/lib/minikube/certs/apiserver-kubelet-client.key",
                            "--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname",
                            "--proxy-client-cert-file=/var/lib/minikube/certs/front-proxy-client.crt",
                            "--proxy-client-key-file=/var/lib/minikube/certs/front-proxy-client.key",
                            "--requestheader-allowed-names=front-proxy-client",
                            "--requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt",
                            "--requestheader-extra-headers-prefix=X-Remote-Extra-",
                            "--requestheader-group-headers=X-Remote-Group",
                            "--requestheader-username-headers=X-Remote-User",
                            "--secure-port=8443",
                            "--service-account-key-file=/var/lib/minikube/certs/sa.pub",
                            "--service-cluster-ip-range=10.96.0.0/12",
                            "--tls-cert-file=/var/lib/minikube/certs/apiserver.crt",
                            "--tls-private-key-file=/var/lib/minikube/certs/apiserver.key"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "250m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "ca-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "k8s-certs",
                                "readOnly": true,
                                "mountPath": "/var/lib/minikube/certs"
                            },
                            {
                                "name": "usr-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/livez",
                                "port": 8443,
                                "host": "192.168.39.244",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/readyz",
                                "port": 8443,
                                "host": "192.168.39.244",
                                "scheme": "HTTPS"
                            },
                            "timeoutSeconds": 15,
                            "periodSeconds": 1,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/livez",
                                "port": 8443,
                                "host": "192.168.39.244",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:03Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:09Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:09Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:03Z"
                    }
                ],
                "hostIP": "192.168.39.244",
                "podIP": "192.168.39.244",
                "podIPs": [
                    {
                        "ip": "192.168.39.244"
                    }
                ],
                "startTime": "2020-11-12T19:51:03Z",
                "containerStatuses": [
                    {
                        "name": "kube-apiserver",
                        "state": {
                            "running": {
                                "startedAt": "2020-11-12T19:50:49Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-apiserver:v1.19.2",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-apiserver@sha256:fc905eab708c6abbdf0ef0d47667592b948fea3adf31d71b19b5205340d00011",
                        "containerID": "docker://0e69807164902f3522275489a9335065c9f9f413d58346def9836bb05681afb1",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-controller-manager-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-controller-manager-minikube",
                "uid": "c5254e72-adbc-440f-ac43-4f726d9a56a1",
                "resourceVersion": "441",
                "creationTimestamp": "2020-11-12T19:51:03Z",
                "labels": {
                    "component": "kube-controller-manager",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "d421d4b6a0d0e042995d6d88d0637437",
                    "kubernetes.io/config.mirror": "d421d4b6a0d0e042995d6d88d0637437",
                    "kubernetes.io/config.seen": "2020-11-12T19:50:57.283142214Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "652b882a-88e0-4bb6-b770-543181d08847",
                        "controller": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:52:06Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubernetes.io/config.hash": {},
                                    "f:kubernetes.io/config.mirror": {},
                                    "f:kubernetes.io/config.seen": {},
                                    "f:kubernetes.io/config.source": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:component": {},
                                    "f:tier": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"652b882a-88e0-4bb6-b770-543181d08847\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"kube-controller-manager\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:livenessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:name": {},
                                        "f:resources": {
                                            ".": {},
                                            "f:requests": {
                                                ".": {},
                                                "f:cpu": {}
                                            }
                                        },
                                        "f:startupProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/etc/kubernetes/controller-manager.conf\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/etc/ssl/certs\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/usr/libexec/kubernetes/kubelet-plugins/volume/exec\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            },
                                            "k:{\"mountPath\":\"/usr/share/ca-certificates\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/var/lib/minikube/certs\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:nodeName": {},
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"ca-certs\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"flexvolume-dir\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"k8s-certs\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"kubeconfig\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"usr-share-ca-certificates\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            },
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"192.168.39.244\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "ca-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "flexvolume-dir",
                        "hostPath": {
                            "path": "/usr/libexec/kubernetes/kubelet-plugins/volume/exec",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "k8s-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/etc/kubernetes/controller-manager.conf",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "usr-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-controller-manager",
                        "image": "k8s.gcr.io/kube-controller-manager:v1.19.2",
                        "command": [
                            "kube-controller-manager",
                            "--authentication-kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--authorization-kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--bind-address=127.0.0.1",
                            "--client-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--cluster-name=mk",
                            "--cluster-signing-cert-file=/var/lib/minikube/certs/ca.crt",
                            "--cluster-signing-key-file=/var/lib/minikube/certs/ca.key",
                            "--controllers=*,bootstrapsigner,tokencleaner",
                            "--kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--leader-elect=false",
                            "--port=0",
                            "--requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt",
                            "--root-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--service-account-private-key-file=/var/lib/minikube/certs/sa.key",
                            "--use-service-account-credentials=true"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "200m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "ca-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "flexvolume-dir",
                                "mountPath": "/usr/libexec/kubernetes/kubelet-plugins/volume/exec"
                            },
                            {
                                "name": "k8s-certs",
                                "readOnly": true,
                                "mountPath": "/var/lib/minikube/certs"
                            },
                            {
                                "name": "kubeconfig",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/controller-manager.conf"
                            },
                            {
                                "name": "usr-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10257,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10257,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:03Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:52:06Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:52:06Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:03Z"
                    }
                ],
                "hostIP": "192.168.39.244",
                "podIP": "192.168.39.244",
                "podIPs": [
                    {
                        "ip": "192.168.39.244"
                    }
                ],
                "startTime": "2020-11-12T19:51:03Z",
                "containerStatuses": [
                    {
                        "name": "kube-controller-manager",
                        "state": {
                            "running": {
                                "startedAt": "2020-11-12T19:50:50Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-controller-manager:v1.19.2",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-controller-manager@sha256:c94b98d9f79bdfe33010c313891d99ed50858d6f04ceef865e7904c338dad913",
                        "containerID": "docker://b8df1435505f0af63c9c5f780b1fc6143cb7e1375285490cfbe83f3a8ddc9998",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-proxy-np9wk",
                "generateName": "kube-proxy-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-proxy-np9wk",
                "uid": "139b4316-c1f1-4025-a960-2f5344defff7",
                "resourceVersion": "387",
                "creationTimestamp": "2020-11-12T19:51:03Z",
                "labels": {
                    "controller-revision-hash": "744c595cb",
                    "k8s-app": "kube-proxy",
                    "pod-template-generation": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "DaemonSet",
                        "name": "kube-proxy",
                        "uid": "65fca070-6e14-4af9-91fd-3e1a78d6e857",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:51:03Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:generateName": {},
                                "f:labels": {
                                    ".": {},
                                    "f:controller-revision-hash": {},
                                    "f:k8s-app": {},
                                    "f:pod-template-generation": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"65fca070-6e14-4af9-91fd-3e1a78d6e857\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:blockOwnerDeletion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:affinity": {
                                    ".": {},
                                    "f:nodeAffinity": {
                                        ".": {},
                                        "f:requiredDuringSchedulingIgnoredDuringExecution": {
                                            ".": {},
                                            "f:nodeSelectorTerms": {}
                                        }
                                    }
                                },
                                "f:containers": {
                                    "k:{\"name\":\"kube-proxy\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:env": {
                                            ".": {},
                                            "k:{\"name\":\"NODE_NAME\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:valueFrom": {
                                                    ".": {},
                                                    "f:fieldRef": {
                                                        ".": {},
                                                        "f:apiVersion": {},
                                                        "f:fieldPath": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:name": {},
                                        "f:resources": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:privileged": {}
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/lib/modules\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/run/xtables.lock\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            },
                                            "k:{\"mountPath\":\"/var/lib/kube-proxy\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:nodeSelector": {
                                    ".": {},
                                    "f:kubernetes.io/os": {}
                                },
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:serviceAccount": {},
                                "f:serviceAccountName": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"kube-proxy\"}": {
                                        ".": {},
                                        "f:configMap": {
                                            ".": {},
                                            "f:defaultMode": {},
                                            "f:name": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"lib-modules\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"xtables-lock\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:51:08Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:conditions": {
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"192.168.39.244\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kube-proxy",
                        "configMap": {
                            "name": "kube-proxy",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "xtables-lock",
                        "hostPath": {
                            "path": "/run/xtables.lock",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "lib-modules",
                        "hostPath": {
                            "path": "/lib/modules",
                            "type": ""
                        }
                    },
                    {
                        "name": "kube-proxy-token-2mjk4",
                        "secret": {
                            "secretName": "kube-proxy-token-2mjk4",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-proxy",
                        "image": "k8s.gcr.io/kube-proxy:v1.19.2",
                        "command": [
                            "/usr/local/bin/kube-proxy",
                            "--config=/var/lib/kube-proxy/config.conf",
                            "--hostname-override=$(NODE_NAME)"
                        ],
                        "env": [
                            {
                                "name": "NODE_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "spec.nodeName"
                                    }
                                }
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "kube-proxy",
                                "mountPath": "/var/lib/kube-proxy"
                            },
                            {
                                "name": "xtables-lock",
                                "mountPath": "/run/xtables.lock"
                            },
                            {
                                "name": "lib-modules",
                                "readOnly": true,
                                "mountPath": "/lib/modules"
                            },
                            {
                                "name": "kube-proxy-token-2mjk4",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "privileged": true
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeSelector": {
                    "kubernetes.io/os": "linux"
                },
                "serviceAccountName": "kube-proxy",
                "serviceAccount": "kube-proxy",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "affinity": {
                    "nodeAffinity": {
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                            "nodeSelectorTerms": [
                                {
                                    "matchFields": [
                                        {
                                            "key": "metadata.name",
                                            "operator": "In",
                                            "values": [
                                                "minikube"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/disk-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/memory-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/pid-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/unschedulable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/network-unavailable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:03Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:05Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:05Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:03Z"
                    }
                ],
                "hostIP": "192.168.39.244",
                "podIP": "192.168.39.244",
                "podIPs": [
                    {
                        "ip": "192.168.39.244"
                    }
                ],
                "startTime": "2020-11-12T19:51:03Z",
                "containerStatuses": [
                    {
                        "name": "kube-proxy",
                        "state": {
                            "running": {
                                "startedAt": "2020-11-12T19:51:05Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-proxy:v1.19.2",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-proxy@sha256:fa7c9d19680704e246873eb600c02fa95167d5c58e56d56ba9ed30b7c4150ac1",
                        "containerID": "docker://af8204b1f645f6db9a4694032fb7fa38722bea6ee64af5fbb2033ba2316b29a8",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "kube-scheduler-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-scheduler-minikube",
                "uid": "98356023-0a36-444d-8d08-20f1a392bbdf",
                "resourceVersion": "445",
                "creationTimestamp": "2020-11-12T19:51:03Z",
                "labels": {
                    "component": "kube-scheduler",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "ff7d12f9e4f14e202a85a7c5534a3129",
                    "kubernetes.io/config.mirror": "ff7d12f9e4f14e202a85a7c5534a3129",
                    "kubernetes.io/config.seen": "2020-11-12T19:50:57.283143236Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "652b882a-88e0-4bb6-b770-543181d08847",
                        "controller": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:52:10Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubernetes.io/config.hash": {},
                                    "f:kubernetes.io/config.mirror": {},
                                    "f:kubernetes.io/config.seen": {},
                                    "f:kubernetes.io/config.source": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:component": {},
                                    "f:tier": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"652b882a-88e0-4bb6-b770-543181d08847\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"kube-scheduler\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:livenessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:name": {},
                                        "f:resources": {
                                            ".": {},
                                            "f:requests": {
                                                ".": {},
                                                "f:cpu": {}
                                            }
                                        },
                                        "f:startupProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/etc/kubernetes/scheduler.conf\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:nodeName": {},
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"kubeconfig\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            },
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"192.168.39.244\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/etc/kubernetes/scheduler.conf",
                            "type": "FileOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-scheduler",
                        "image": "k8s.gcr.io/kube-scheduler:v1.19.2",
                        "command": [
                            "kube-scheduler",
                            "--authentication-kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--authorization-kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--bind-address=127.0.0.1",
                            "--kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--leader-elect=false",
                            "--port=0"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "100m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "kubeconfig",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/scheduler.conf"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10259,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10259,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:03Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:52:10Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:52:10Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:03Z"
                    }
                ],
                "hostIP": "192.168.39.244",
                "podIP": "192.168.39.244",
                "podIPs": [
                    {
                        "ip": "192.168.39.244"
                    }
                ],
                "startTime": "2020-11-12T19:51:03Z",
                "containerStatuses": [
                    {
                        "name": "kube-scheduler",
                        "state": {
                            "running": {
                                "startedAt": "2020-11-12T19:50:50Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-scheduler:v1.19.2",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-scheduler@sha256:bb058c7394fad4d968d366b8b372698a1144a1c3c6de52cdf46ff050ccfd31ff",
                        "containerID": "docker://38b44c109daa541f70f4fa59a3fe23fc156be0c4da5fd17226ec9927bd7afdfb",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "storage-provisioner",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/storage-provisioner",
                "uid": "63d6dfe0-2bea-4c1f-9036-aff7df591771",
                "resourceVersion": "407",
                "creationTimestamp": "2020-11-12T19:50:57Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "integration-test": "storage-provisioner"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"integration-test\":\"storage-provisioner\"},\"name\":\"storage-provisioner\",\"namespace\":\"kube-system\"},\"spec\":{\"containers\":[{\"command\":[\"/storage-provisioner\"],\"image\":\"gcr.io/k8s-minikube/storage-provisioner:v3\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"storage-provisioner\",\"volumeMounts\":[{\"mountPath\":\"/tmp\",\"name\":\"tmp\"}]}],\"hostNetwork\":true,\"serviceAccountName\":\"storage-provisioner\",\"volumes\":[{\"hostPath\":{\"path\":\"/tmp\",\"type\":\"Directory\"},\"name\":\"tmp\"}]}}\n"
                },
                "managedFields": [
                    {
                        "manager": "kubectl-client-side-apply",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:50:57Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:addonmanager.kubernetes.io/mode": {},
                                    "f:integration-test": {}
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"storage-provisioner\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:name": {},
                                        "f:resources": {},
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/tmp\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:serviceAccount": {},
                                "f:serviceAccountName": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"tmp\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kube-scheduler",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:50:58Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:51:19Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:conditions": {
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"192.168.39.244\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "tmp",
                        "hostPath": {
                            "path": "/tmp",
                            "type": "Directory"
                        }
                    },
                    {
                        "name": "storage-provisioner-token-tgjww",
                        "secret": {
                            "secretName": "storage-provisioner-token-tgjww",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "storage-provisioner",
                        "image": "gcr.io/k8s-minikube/storage-provisioner:v3",
                        "command": [
                            "/storage-provisioner"
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "tmp",
                                "mountPath": "/tmp"
                            },
                            {
                                "name": "storage-provisioner-token-tgjww",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "storage-provisioner",
                "serviceAccount": "storage-provisioner",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:03Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:19Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:19Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-11-12T19:51:03Z"
                    }
                ],
                "hostIP": "192.168.39.244",
                "podIP": "192.168.39.244",
                "podIPs": [
                    {
                        "ip": "192.168.39.244"
                    }
                ],
                "startTime": "2020-11-12T19:51:03Z",
                "containerStatuses": [
                    {
                        "name": "storage-provisioner",
                        "state": {
                            "running": {
                                "startedAt": "2020-11-12T19:51:19Z"
                            }
                        },
                        "lastState": {
                            "terminated": {
                                "exitCode": 1,
                                "reason": "Error",
                                "startedAt": "2020-11-12T19:51:04Z",
                                "finishedAt": "2020-11-12T19:51:05Z",
                                "containerID": "docker://ee77a48e368c933c809ebd6387302d0cbe099f10d7a55b3458f93ff0339f9792"
                            }
                        },
                        "ready": true,
                        "restartCount": 2,
                        "image": "gcr.io/k8s-minikube/storage-provisioner:v3",
                        "imageID": "docker-pullable://gcr.io/k8s-minikube/storage-provisioner@sha256:5d8c9e69200846ff740bca872d681d2a736014386e4006fd26c4bf24ef7813ec",
                        "containerID": "docker://1d55ae6ee17bafe078cd841ebed3dc58c5c378bf8f76b43b9e8dc8534ae8cb0b",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        }
    ]
}
==== START logs for container coredns of pod kube-system/coredns-f9fd979d6-28hnd ====
.:53
[INFO] plugin/reload: Running configuration MD5 = db32ca3650231d74073ff4cf814959a7
CoreDNS-1.7.0
linux/amd64, go1.14.4, f59c03d
==== END logs for container coredns of pod kube-system/coredns-f9fd979d6-28hnd ====
==== START logs for container etcd of pod kube-system/etcd-minikube ====
[WARNING] Deprecated '--logger=capnslog' flag is set; use '--logger=zap' flag instead
2020-11-12 19:50:50.787823 I | etcdmain: etcd Version: 3.4.13
2020-11-12 19:50:50.787851 I | etcdmain: Git SHA: ae9734ed2
2020-11-12 19:50:50.787867 I | etcdmain: Go Version: go1.12.17
2020-11-12 19:50:50.787869 I | etcdmain: Go OS/Arch: linux/amd64
2020-11-12 19:50:50.787872 I | etcdmain: setting maximum number of CPUs to 2, total number of available CPUs is 2
[WARNING] Deprecated '--logger=capnslog' flag is set; use '--logger=zap' flag instead
2020-11-12 19:50:50.787936 I | embed: peerTLS: cert = /var/lib/minikube/certs/etcd/peer.crt, key = /var/lib/minikube/certs/etcd/peer.key, trusted-ca = /var/lib/minikube/certs/etcd/ca.crt, client-cert-auth = true, crl-file = 
2020-11-12 19:50:50.788723 I | embed: name = minikube
2020-11-12 19:50:50.788733 I | embed: data dir = /var/lib/minikube/etcd
2020-11-12 19:50:50.788735 I | embed: member dir = /var/lib/minikube/etcd/member
2020-11-12 19:50:50.788738 I | embed: heartbeat = 100ms
2020-11-12 19:50:50.788740 I | embed: election = 1000ms
2020-11-12 19:50:50.788743 I | embed: snapshot count = 10000
2020-11-12 19:50:50.788747 I | embed: advertise client URLs = https://192.168.39.244:2379
2020-11-12 19:50:50.821822 I | etcdserver: starting member 38b93d7e943acb5d in cluster ae521d247b31ac74
raft2020/11/12 19:50:50 INFO: 38b93d7e943acb5d switched to configuration voters=()
raft2020/11/12 19:50:50 INFO: 38b93d7e943acb5d became follower at term 0
raft2020/11/12 19:50:50 INFO: newRaft 38b93d7e943acb5d [peers: [], term: 0, commit: 0, applied: 0, lastindex: 0, lastterm: 0]
raft2020/11/12 19:50:50 INFO: 38b93d7e943acb5d became follower at term 1
raft2020/11/12 19:50:50 INFO: 38b93d7e943acb5d switched to configuration voters=(4087365750677490525)
2020-11-12 19:50:50.824378 W | auth: simple token is not cryptographically signed
2020-11-12 19:50:50.831155 I | etcdserver: starting server... [version: 3.4.13, cluster version: to_be_decided]
2020-11-12 19:50:50.832538 I | embed: ClientTLS: cert = /var/lib/minikube/certs/etcd/server.crt, key = /var/lib/minikube/certs/etcd/server.key, trusted-ca = /var/lib/minikube/certs/etcd/ca.crt, client-cert-auth = true, crl-file = 
2020-11-12 19:50:50.832759 I | embed: listening for metrics on http://127.0.0.1:2381
2020-11-12 19:50:50.832855 I | embed: listening for peers on 192.168.39.244:2380
2020-11-12 19:50:50.833005 I | etcdserver: 38b93d7e943acb5d as single-node; fast-forwarding 9 ticks (election ticks 10)
raft2020/11/12 19:50:50 INFO: 38b93d7e943acb5d switched to configuration voters=(4087365750677490525)
2020-11-12 19:50:50.833382 I | etcdserver/membership: added member 38b93d7e943acb5d [https://192.168.39.244:2380] to cluster ae521d247b31ac74
raft2020/11/12 19:50:51 INFO: 38b93d7e943acb5d is starting a new election at term 1
raft2020/11/12 19:50:51 INFO: 38b93d7e943acb5d became candidate at term 2
raft2020/11/12 19:50:51 INFO: 38b93d7e943acb5d received MsgVoteResp from 38b93d7e943acb5d at term 2
raft2020/11/12 19:50:51 INFO: 38b93d7e943acb5d became leader at term 2
raft2020/11/12 19:50:51 INFO: raft.node: 38b93d7e943acb5d elected leader 38b93d7e943acb5d at term 2
2020-11-12 19:50:51.622766 I | etcdserver: setting up the initial cluster version to 3.4
2020-11-12 19:50:51.668100 N | etcdserver/membership: set the initial cluster version to 3.4
2020-11-12 19:50:51.668172 I | etcdserver/api: enabled capabilities for version 3.4
2020-11-12 19:50:51.668200 I | etcdserver: published {Name:minikube ClientURLs:[https://192.168.39.244:2379]} to cluster ae521d247b31ac74
2020-11-12 19:50:51.668305 I | embed: ready to serve client requests
2020-11-12 19:50:51.669307 I | embed: serving client requests on 192.168.39.244:2379
2020-11-12 19:50:51.669466 I | embed: ready to serve client requests
2020-11-12 19:50:51.670315 I | embed: serving client requests on 127.0.0.1:2379
2020-11-12 19:50:54.361205 W | etcdserver: read-only range request "key:\"/registry/ranges/servicenodeports\" " with result "range_response_count:0 size:4" took too long (153.791441ms) to execute
2020-11-12 19:50:54.363837 W | etcdserver: read-only range request "key:\"/registry/csinodes/minikube\" " with result "range_response_count:0 size:4" took too long (135.101834ms) to execute
2020-11-12 19:50:54.371141 W | etcdserver: read-only range request "key:\"/registry/namespaces/kube-system\" " with result "range_response_count:0 size:4" took too long (142.115594ms) to execute
2020-11-12 19:51:07.752667 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:51:11.177672 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:51:21.177826 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:51:31.177763 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:51:41.177602 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:51:51.177967 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:52:01.177836 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:52:11.177810 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:52:21.177676 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:52:31.177707 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:52:41.177771 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:52:51.177829 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:53:01.178037 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:53:11.177749 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:53:21.177727 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:53:31.177924 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:53:41.177824 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:53:51.177834 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:54:01.177806 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:54:11.177808 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:54:21.177656 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:54:31.177824 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:54:41.177746 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:54:51.177860 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:55:01.177658 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:55:11.177796 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:55:21.177726 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:55:31.177839 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:55:41.177791 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:55:51.177894 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:56:01.177837 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:56:11.178230 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:56:21.177741 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:56:31.177766 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:56:41.177858 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:56:51.177753 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:57:01.177969 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:57:11.177963 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:57:21.177863 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:57:31.177852 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:57:41.177884 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:57:51.177713 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:58:01.177648 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:58:11.177776 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:58:21.177658 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:58:31.177784 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:58:41.177664 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:58:51.177849 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:59:01.178194 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:59:11.177798 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:59:21.177714 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:59:31.177671 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:59:41.177841 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 19:59:51.178001 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:00:01.177821 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:00:11.177750 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:00:21.178076 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:00:31.177880 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:00:41.178111 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:00:51.177815 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:00:51.687820 I | mvcc: store.index: compact 600
2020-11-12 20:00:51.689036 I | mvcc: finished scheduled compaction at 600 (took 662.912µs)
2020-11-12 20:01:01.177805 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:01:11.177525 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:01:21.177855 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:01:31.177702 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:01:41.177827 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:01:51.177805 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:02:01.178121 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:02:11.177806 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:02:21.177798 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:02:31.177833 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:02:41.178225 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:02:51.177909 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:03:01.177824 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:03:11.177655 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:03:21.177748 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:03:31.177664 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:03:41.177839 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:03:51.177691 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:04:01.177612 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:04:11.177715 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:04:21.177879 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:04:31.177603 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:04:41.177792 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:04:51.177573 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:05:01.177731 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:05:11.177698 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:05:21.177667 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:05:31.177894 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:05:41.177674 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:05:51.177671 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:05:51.691857 I | mvcc: store.index: compact 811
2020-11-12 20:05:51.693143 I | mvcc: finished scheduled compaction at 811 (took 951.316µs)
2020-11-12 20:06:01.177696 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:06:11.177510 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:06:21.177551 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:06:31.177792 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:06:41.177658 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:06:51.177661 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:07:01.177672 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:07:11.177828 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:07:21.177855 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:07:31.178161 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:07:41.177768 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:07:51.177759 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:08:01.177676 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:08:11.177705 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:08:21.177757 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:08:31.177750 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:08:41.177735 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:08:51.178306 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:09:01.177814 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:09:11.177717 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:09:21.177718 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:09:31.177681 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:09:41.177652 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:09:51.177793 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:10:01.177901 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:10:11.177681 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:10:21.178050 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:10:31.177748 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:10:41.177665 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:10:51.177715 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:10:51.698775 I | mvcc: store.index: compact 1023
2020-11-12 20:10:51.699422 I | mvcc: finished scheduled compaction at 1023 (took 350.844µs)
2020-11-12 20:11:01.177681 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:11:11.177714 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:11:21.177740 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:11:31.177812 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:11:41.177794 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:11:51.177916 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:12:01.177722 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:12:11.178056 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:12:21.177771 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:12:31.177782 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:12:41.177741 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:12:51.177618 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:13:01.177590 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:13:11.177850 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:13:21.177878 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:13:31.177779 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:13:41.177714 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:13:51.177697 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:14:01.177963 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:14:11.177940 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:14:21.177747 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:14:31.177688 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:14:41.178019 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:14:51.177694 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:15:01.177695 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:15:11.177736 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:15:21.177995 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:15:31.177837 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:15:41.178058 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:15:51.177929 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:15:51.707247 I | mvcc: store.index: compact 1234
2020-11-12 20:15:51.707862 I | mvcc: finished scheduled compaction at 1234 (took 353.872µs)
2020-11-12 20:16:01.177752 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:16:11.177793 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:16:21.177820 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:16:31.179207 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:16:41.177847 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:16:51.177936 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:17:01.177692 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:17:11.177862 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:17:21.177909 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:17:31.177857 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:17:41.177697 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:17:51.179409 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:18:01.178090 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:18:11.177977 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:18:21.177627 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:18:31.177706 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:18:41.177824 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:18:51.177822 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:19:01.177717 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:19:11.177775 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:19:21.177860 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:19:31.178045 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:19:41.178128 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:19:51.178028 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:20:01.177880 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:20:11.177836 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:20:21.177906 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:20:31.177847 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:20:41.177859 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:20:51.177798 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:20:51.711648 I | mvcc: store.index: compact 1445
2020-11-12 20:20:51.712230 I | mvcc: finished scheduled compaction at 1445 (took 344.173µs)
2020-11-12 20:21:01.177840 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:21:11.177792 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:21:21.177946 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:21:31.177971 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:21:41.177685 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:21:51.177835 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:22:01.177731 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:22:11.177846 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:22:21.177683 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:22:31.177568 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:22:41.177737 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:22:51.177777 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:23:01.177937 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:23:11.177757 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:23:21.177682 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:23:31.178043 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:23:41.177730 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:23:51.177688 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:24:01.177682 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:24:11.177684 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:24:21.177669 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:24:31.177842 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:24:41.177754 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:24:51.177687 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:25:01.177622 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:25:11.177690 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:25:21.177621 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:25:31.177753 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:25:41.177916 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:25:51.177765 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:25:51.715894 I | mvcc: store.index: compact 1657
2020-11-12 20:25:51.716792 I | mvcc: finished scheduled compaction at 1657 (took 649.672µs)
2020-11-12 20:26:01.177924 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:26:11.177931 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:26:21.177785 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:26:31.177800 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:26:41.178027 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:26:51.177753 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:27:01.178041 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:27:11.177830 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:27:21.177740 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:27:31.177668 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:27:41.177750 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:27:51.177676 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:28:01.177706 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:28:11.177836 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:28:21.177703 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:28:31.178032 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:28:41.177780 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:28:51.177912 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:29:01.177718 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:29:11.178230 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:29:21.178037 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:29:31.177864 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:29:41.178002 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:29:51.177812 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:30:01.177849 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:30:11.177804 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:30:21.177777 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:30:31.177795 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:30:41.177812 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:30:51.177911 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:30:51.720675 I | mvcc: store.index: compact 1868
2020-11-12 20:30:51.722009 I | mvcc: finished scheduled compaction at 1868 (took 595.177µs)
2020-11-12 20:31:01.177797 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:31:11.177662 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:31:21.177737 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:31:31.177765 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:31:41.178606 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:31:51.177673 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:32:01.177834 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:32:11.177891 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-12 20:32:21.177835 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:56:27.493264 I | mvcc: store.index: compact 2080
2020-11-13 03:56:27.493963 I | mvcc: finished scheduled compaction at 2080 (took 490.741µs)
2020-11-13 03:56:27.532376 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:56:29.334534 W | etcdserver: request "header:<ID:14653998221483373397 username:\"kube-apiserver-etcd-client\" auth_revision:1 > txn:<compare:<target:MOD key:\"/registry/leases/kube-node-lease/minikube\" mod_revision:2146 > success:<request_put:<key:\"/registry/leases/kube-node-lease/minikube\" value_size:535 >> failure:<request_range:<key:\"/registry/leases/kube-node-lease/minikube\" > >>" with result "size:16" took too long (207.26683ms) to execute
2020-11-13 03:56:30.476796 W | wal: sync duration of 1.085986835s, expected less than 1s
2020-11-13 03:56:31.002154 W | etcdserver: read-only range request "key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" " with result "range_response_count:1 size:601" took too long (1.848094168s) to execute
2020-11-13 03:56:31.077091 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (422.811929ms) to execute
2020-11-13 03:56:31.319061 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:56:37.951094 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (192.992743ms) to execute
2020-11-13 03:56:37.986115 W | etcdserver: read-only range request "key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" " with result "range_response_count:1 size:601" took too long (209.873716ms) to execute
2020-11-13 03:56:38.025544 W | etcdserver: read-only range request "key:\"/registry/services/endpoints/default/kubernetes\" " with result "range_response_count:1 size:422" took too long (133.18271ms) to execute
2020-11-13 03:56:41.188066 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:56:51.177805 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:57:01.177891 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:57:11.177744 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:57:21.178124 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:57:31.177903 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:57:41.178004 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:57:51.177867 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:58:01.177746 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:58:11.177709 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:58:21.178019 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:58:31.177687 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:58:41.177682 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:58:51.178075 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:59:01.177836 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:59:11.177917 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:59:21.177809 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:59:31.177769 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:59:41.177910 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 03:59:51.177877 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:00:01.177703 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:00:11.177765 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:00:21.177785 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:00:31.178320 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:00:41.178074 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:00:51.177840 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:01:01.177897 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:01:11.177948 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:01:21.177685 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:01:27.510555 I | mvcc: store.index: compact 2153
2020-11-13 04:01:27.511322 I | mvcc: finished scheduled compaction at 2153 (took 352.436µs)
2020-11-13 04:01:31.177884 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:01:41.178206 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:01:51.178018 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:02:01.178068 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:02:11.177885 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:02:21.178196 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:02:31.178057 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:02:41.178557 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:02:51.178036 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:03:01.178350 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:03:11.177920 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:03:21.177810 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:03:31.177769 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:03:41.177788 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:03:51.179823 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:04:01.177850 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:04:11.178450 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:04:21.178583 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:04:31.177845 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:04:41.179407 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:04:51.177735 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:05:01.177957 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:05:11.178365 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:05:21.177942 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:05:31.178343 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:05:41.178479 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:05:51.178058 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:06:01.177883 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:06:11.178310 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:06:21.178028 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:06:27.537027 I | mvcc: store.index: compact 2364
2020-11-13 04:06:27.537739 I | mvcc: finished scheduled compaction at 2364 (took 391.316µs)
2020-11-13 04:06:31.178349 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:06:41.178190 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:06:51.177971 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:07:01.177928 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:07:11.178335 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:07:21.178182 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:07:31.178057 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:07:41.178086 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:07:51.177731 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:08:01.177808 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:08:11.177838 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:08:21.177932 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:08:31.178283 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:08:41.177886 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:08:51.177895 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:09:01.177900 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:09:11.178078 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:09:21.177951 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:09:31.178053 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:09:41.178435 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:09:51.177929 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:10:01.178038 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:10:11.178064 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:10:21.177831 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:10:31.177821 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:10:41.178824 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:10:51.178636 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:11:01.177959 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:11:11.177973 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:11:21.178823 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:11:25.586790 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (164.085169ms) to execute
2020-11-13 04:11:27.541905 I | mvcc: store.index: compact 2575
2020-11-13 04:11:27.542531 I | mvcc: finished scheduled compaction at 2575 (took 418.232µs)
2020-11-13 04:11:31.178092 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:11:41.177923 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:11:51.177762 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:12:01.178397 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:12:11.178160 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:12:21.178234 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:12:31.177691 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:12:41.178188 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:12:51.178070 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:13:01.177942 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:13:11.177731 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:13:21.177735 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:13:31.177725 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:13:41.178162 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:13:51.178023 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:14:01.178036 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:14:11.177867 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:14:21.178055 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:14:31.177863 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:14:41.178423 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:14:51.177932 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:15:01.178047 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:15:11.178141 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:15:21.177826 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:15:31.177894 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:15:41.177808 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:15:51.177966 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:16:01.177946 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:16:11.177894 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:16:21.177873 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:16:27.547819 I | mvcc: store.index: compact 2787
2020-11-13 04:16:27.549150 I | mvcc: finished scheduled compaction at 2787 (took 606.633µs)
2020-11-13 04:16:31.177930 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:16:41.177878 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:16:51.177907 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:17:01.177771 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:17:11.178146 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:17:21.178234 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:17:31.180857 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:17:41.177762 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:17:51.177772 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:18:01.177770 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:18:11.178135 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:18:21.178059 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:18:31.178149 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:18:41.178090 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:18:51.178149 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:19:01.178132 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:19:11.178228 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:19:21.178220 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:19:31.178326 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:19:41.177965 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:19:51.178038 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:20:01.178091 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:20:11.177887 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:20:21.177946 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:20:31.178135 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:20:41.177937 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:20:51.178044 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:21:01.177957 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:21:11.177721 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:21:21.178176 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:21:27.551954 I | mvcc: store.index: compact 2998
2020-11-13 04:21:27.552661 I | mvcc: finished scheduled compaction at 2998 (took 494.378µs)
2020-11-13 04:21:31.178173 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:21:41.178164 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:21:51.177735 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:22:01.177790 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:22:11.177873 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:22:21.178079 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:22:31.177877 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:22:41.177780 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:22:51.177826 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:23:01.178064 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:23:11.179291 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:23:21.177965 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:23:31.178272 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:23:41.178097 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:23:51.177858 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:24:01.178187 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:24:11.178145 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:24:21.178195 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:24:31.182391 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:24:41.178014 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:24:51.178128 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:25:01.178145 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:25:11.178050 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:25:21.178143 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:25:31.177744 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:25:41.177863 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:25:51.178034 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:26:01.178068 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:26:11.177810 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:26:21.177963 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:26:27.556918 I | mvcc: store.index: compact 3209
2020-11-13 04:26:27.557636 I | mvcc: finished scheduled compaction at 3209 (took 469.962µs)
2020-11-13 04:26:31.178186 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:26:41.178066 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:26:51.178007 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:27:01.178230 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:27:11.177860 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:27:21.177730 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:27:31.177882 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:27:41.178133 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:27:51.178038 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:28:01.177867 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:28:11.177949 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:28:21.178150 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:28:31.178083 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:28:41.177864 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:28:51.178447 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:29:01.178374 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:29:11.178226 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:29:21.178162 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:29:31.177909 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:29:41.178098 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:29:51.177814 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:30:01.177811 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:30:11.178415 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:30:21.178155 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:30:31.178310 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:30:41.177896 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:30:51.178264 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:31:01.177955 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:31:11.179693 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:31:21.178089 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:31:27.561391 I | mvcc: store.index: compact 3420
2020-11-13 04:31:27.562241 I | mvcc: finished scheduled compaction at 3420 (took 653.924µs)
2020-11-13 04:31:31.178346 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:31:41.178103 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:31:51.178445 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:32:01.178384 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:32:11.177900 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:32:21.177926 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:32:31.177917 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:32:41.177858 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:32:51.178003 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:33:01.177962 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:33:11.178839 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:33:21.177801 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:33:31.177884 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:33:41.178064 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:33:51.178142 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:34:01.178166 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:34:11.177840 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:34:21.178039 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:34:31.178110 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:34:41.177804 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:34:51.177939 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:35:01.177654 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:35:11.178200 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:35:21.178254 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:35:31.177898 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:35:41.177869 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:35:51.178101 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:36:01.178193 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:36:11.177679 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:36:21.177733 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:36:27.565304 I | mvcc: store.index: compact 3632
2020-11-13 04:36:27.566224 I | mvcc: finished scheduled compaction at 3632 (took 692.177µs)
2020-11-13 04:36:31.178032 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:36:41.178118 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:36:51.177812 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:37:01.177929 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:37:11.178137 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:37:21.177849 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:37:31.178205 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:37:41.178240 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:37:51.178165 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:38:01.177947 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:38:11.177822 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:38:21.177891 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:38:31.178051 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:38:41.178602 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:38:51.177735 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:39:01.177884 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:39:11.178045 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:39:21.178008 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:39:31.178124 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:39:41.177840 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:39:51.178268 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:40:01.178103 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:40:11.177903 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:40:21.177800 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:40:31.177757 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:40:41.177790 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:40:51.178237 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:41:01.178032 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:41:11.177723 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:41:21.179794 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:41:27.570396 I | mvcc: store.index: compact 3843
2020-11-13 04:41:27.570913 I | mvcc: finished scheduled compaction at 3843 (took 333.99µs)
2020-11-13 04:41:31.178398 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:41:41.179311 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:41:51.177908 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:42:01.177826 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:42:11.178190 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:42:21.178002 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:42:31.177886 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:42:41.177914 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:42:51.177901 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:43:01.178048 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:43:11.177710 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:43:21.178103 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:43:31.177831 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:43:41.177800 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:43:51.177706 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:44:01.177935 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:44:11.177922 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:44:21.177873 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:44:31.177815 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:44:41.177945 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:44:51.178343 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:45:01.178114 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:45:11.177875 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:45:21.177813 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:45:31.177846 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:45:41.177956 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:45:51.178124 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:46:01.179790 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:46:11.177815 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:46:21.179027 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:46:27.575193 I | mvcc: store.index: compact 4054
2020-11-13 04:46:27.576680 I | mvcc: finished scheduled compaction at 4054 (took 699.682µs)
2020-11-13 04:46:31.178014 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:46:41.177797 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:46:51.178607 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:47:01.177891 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:47:11.178129 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:47:21.178374 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:47:31.178076 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:47:41.178197 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:47:51.177878 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:48:01.178059 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:48:11.177770 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:48:21.177920 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:48:31.178058 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:48:41.177892 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:48:51.177756 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:49:01.177860 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:49:11.178346 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:49:21.177778 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:49:31.177966 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:49:41.177873 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:49:51.177742 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:50:01.178575 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:50:11.177755 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:50:21.178054 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:50:31.177840 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:50:41.178163 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:50:51.177830 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:51:01.177787 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:51:11.177790 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:51:21.177899 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:51:27.579498 I | mvcc: store.index: compact 4266
2020-11-13 04:51:27.580337 I | mvcc: finished scheduled compaction at 4266 (took 610.441µs)
2020-11-13 04:51:31.178062 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:51:41.178346 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:51:51.177861 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:52:01.177829 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:52:11.177889 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:52:21.178077 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:52:31.178139 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:52:41.178128 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:52:51.178317 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:53:01.178127 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:53:11.178157 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:53:21.177827 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:53:31.179472 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:53:41.177783 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:53:51.178315 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:54:01.177803 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:54:11.178187 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:54:21.177846 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:54:31.177975 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:54:41.177749 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:54:51.177855 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:55:01.177732 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:55:11.177884 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:55:21.178109 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:55:31.179754 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:55:33.809603 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (110.777121ms) to execute
2020-11-13 04:55:41.178053 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:55:51.178207 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:56:01.177820 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:56:11.178212 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:56:21.177893 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:56:27.591901 I | mvcc: store.index: compact 4477
2020-11-13 04:56:27.593297 I | mvcc: finished scheduled compaction at 4477 (took 694.052µs)
2020-11-13 04:56:31.178367 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:56:41.177784 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:56:51.178102 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:57:01.177842 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:57:11.177797 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:57:21.177908 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:57:31.178065 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:57:41.177790 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:57:51.177876 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:58:01.177860 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:58:11.177911 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:58:21.178072 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:58:31.178198 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:58:41.177962 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:58:51.178210 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:59:01.177879 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:59:11.177818 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:59:21.177813 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:59:31.178121 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:59:41.177966 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 04:59:51.178061 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:00:01.177864 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:00:11.178476 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:00:21.177911 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:00:31.178066 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:00:41.177807 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:00:51.178343 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:01:01.177877 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:01:11.178116 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:01:21.177901 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:01:27.596362 I | mvcc: store.index: compact 4688
2020-11-13 05:01:27.596959 I | mvcc: finished scheduled compaction at 4688 (took 407.04µs)
2020-11-13 05:01:31.177833 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:01:41.178061 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:01:51.178123 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:02:01.178061 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:02:11.178043 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:02:21.177875 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:02:31.178094 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:02:41.178068 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:02:51.178184 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:03:01.177881 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:03:11.178106 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:03:21.177891 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:03:31.177895 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:03:41.177808 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:03:51.177881 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:04:01.178194 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:04:11.177947 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:04:21.177846 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:04:31.178006 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:04:41.178256 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:04:51.177870 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:05:01.178298 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:05:11.177972 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:05:21.177917 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:05:31.178073 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:05:41.177703 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:05:51.177745 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:06:01.177791 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:06:11.178211 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:06:21.177720 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:06:27.601275 I | mvcc: store.index: compact 4901
2020-11-13 05:06:27.601935 I | mvcc: finished scheduled compaction at 4901 (took 457.417µs)
2020-11-13 05:06:31.177775 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:06:41.177765 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:06:51.177827 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:07:01.177793 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:07:11.177951 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:07:21.177819 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:07:31.177799 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:07:41.177876 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:07:51.177906 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:08:01.177914 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:08:11.177861 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:08:21.177930 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:08:31.177974 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:08:41.177732 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:08:51.177822 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:09:01.177930 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:09:11.177875 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:09:21.177824 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:09:31.177952 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:09:41.177921 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:09:51.177869 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:10:01.177920 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:10:11.177828 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:10:21.177963 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:10:31.177775 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:10:41.178059 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:10:51.177716 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:11:01.177974 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:11:11.177841 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:11:21.178113 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:11:27.606716 I | mvcc: store.index: compact 5112
2020-11-13 05:11:27.607303 I | mvcc: finished scheduled compaction at 5112 (took 425.756µs)
2020-11-13 05:11:31.178047 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:11:41.177888 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:11:51.177684 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:12:01.177776 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:12:11.178039 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:12:21.177903 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:12:31.178236 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:12:41.177836 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:12:51.178182 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:13:01.178082 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:13:11.177967 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:13:21.177908 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:13:31.178049 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:13:41.177866 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:13:51.177904 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:14:01.177884 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:14:11.177818 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:14:21.178276 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:14:31.177957 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:14:41.177907 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:14:51.177922 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:15:01.178184 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:15:11.177806 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:15:21.177902 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:15:31.177873 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:15:41.177854 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:15:51.177771 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:16:01.178115 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:16:11.177913 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:16:21.177942 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:16:27.611523 I | mvcc: store.index: compact 5323
2020-11-13 05:16:27.612200 I | mvcc: finished scheduled compaction at 5323 (took 481.434µs)
2020-11-13 05:16:31.178177 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:16:41.178076 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:16:51.177908 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:17:01.177915 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:17:11.177748 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:17:21.177791 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:17:31.178688 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:17:41.177904 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:17:51.177937 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:18:01.177930 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:18:11.177899 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:18:21.178305 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:18:31.177792 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:18:41.178128 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:18:51.178055 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:19:01.177764 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:19:11.177799 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:19:21.177783 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:19:31.177966 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:19:41.178165 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:19:51.177925 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:20:01.178063 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:20:11.178142 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:20:21.178109 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:20:31.177739 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:20:41.178242 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:20:51.177880 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:21:01.178454 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:21:11.178039 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:21:21.178219 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:21:27.616258 I | mvcc: store.index: compact 5535
2020-11-13 05:21:27.617298 I | mvcc: finished scheduled compaction at 5535 (took 519.115µs)
2020-11-13 05:21:31.178057 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:21:41.177939 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:21:51.177856 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:22:01.178022 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:22:11.177787 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:22:21.177848 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:22:31.178034 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:22:41.178247 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:22:51.178227 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:23:01.178333 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:23:11.177895 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:23:21.178124 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:23:31.177759 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:23:41.178226 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:23:51.178105 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:24:01.178038 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:24:11.178125 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:24:21.177938 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:24:31.178169 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:24:41.177685 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:24:51.177950 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:25:01.177946 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:25:11.177872 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:25:21.177769 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:25:31.177683 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:25:41.178222 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:25:51.178054 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:26:01.177859 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:26:11.178092 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:26:21.177820 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:26:27.620967 I | mvcc: store.index: compact 5746
2020-11-13 05:26:27.622114 I | mvcc: finished scheduled compaction at 5746 (took 604.179µs)
2020-11-13 05:26:31.177872 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:26:41.177840 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:26:51.178042 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:27:01.177904 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:27:11.177894 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:27:21.177901 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:27:31.178176 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:27:41.177763 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:27:51.177854 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:28:01.178007 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:28:11.177723 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:28:21.178117 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:28:31.177853 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:28:41.178050 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:28:51.177914 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:29:01.177843 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:29:11.177810 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:29:21.177925 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:29:31.177926 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:29:41.177888 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:29:51.177944 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:30:01.178143 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:30:11.177901 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:30:21.177692 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:30:31.178163 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:30:41.181896 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:30:51.177715 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:31:01.177792 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:31:11.177899 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:31:21.178396 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:31:27.624732 I | mvcc: store.index: compact 5957
2020-11-13 05:31:27.625769 I | mvcc: finished scheduled compaction at 5957 (took 463.339µs)
2020-11-13 05:31:31.177870 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:31:41.177892 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:31:51.177843 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:32:01.177860 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:32:11.178051 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:32:21.178072 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:32:31.177869 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:32:41.177884 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:32:51.178252 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:33:01.177915 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:33:11.178629 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:33:21.177968 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:33:31.178139 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:33:41.178098 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:33:51.178012 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:34:01.178060 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:34:11.178153 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:34:21.178070 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:34:31.178035 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:34:41.177809 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:34:51.177755 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:35:01.178065 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:35:11.177755 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:35:21.177957 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:35:31.178022 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:35:41.178254 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:35:51.178041 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:36:01.178308 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:36:11.178026 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:36:21.178582 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:36:27.628667 I | mvcc: store.index: compact 6169
2020-11-13 05:36:27.629176 I | mvcc: finished scheduled compaction at 6169 (took 344.33µs)
2020-11-13 05:36:31.177897 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:36:41.178097 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:36:51.177918 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:37:01.178150 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:37:11.177840 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:37:21.177769 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:37:31.178135 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:37:41.178181 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:37:51.177955 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:38:01.180696 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:38:11.177854 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:38:21.178059 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:38:31.177831 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:38:41.178486 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:38:51.178155 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:39:01.178324 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:39:11.177876 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:39:21.178050 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:39:31.178148 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:39:41.177754 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:39:51.178118 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:40:01.177953 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:40:11.177659 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:40:21.177919 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:40:31.177930 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:40:41.177948 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:40:51.178069 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:41:01.177813 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:41:11.177777 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:41:21.178084 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:41:27.632715 I | mvcc: store.index: compact 6380
2020-11-13 05:41:27.633274 I | mvcc: finished scheduled compaction at 6380 (took 405.909µs)
2020-11-13 05:41:31.178044 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:41:41.177945 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:41:51.177826 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:42:01.177840 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:42:11.177965 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:42:21.177973 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:42:31.177908 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:42:41.177915 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:42:51.178331 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:43:01.178137 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:43:11.178164 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:43:21.178030 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:43:31.181443 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:43:41.177885 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:43:51.178177 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:44:01.177892 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:44:11.178032 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:44:21.177973 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:44:31.177784 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:44:41.177906 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:44:51.177828 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:45:01.177784 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:45:11.177971 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:45:21.177828 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:45:31.177848 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:45:41.177844 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:45:51.178136 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:46:01.178339 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:46:11.177913 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:46:21.178115 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:46:27.636012 I | mvcc: store.index: compact 6591
2020-11-13 05:46:27.637102 I | mvcc: finished scheduled compaction at 6591 (took 875.078µs)
2020-11-13 05:46:31.178026 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:46:41.177896 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:46:51.178031 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:47:01.178315 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:47:11.177914 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:47:21.178163 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:47:31.177738 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:47:41.177749 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:47:51.177894 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:48:01.177815 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:48:11.178184 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:48:21.177786 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:48:31.178180 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:48:41.177787 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:48:51.177968 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:49:01.177708 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:49:11.177953 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:49:21.177873 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:49:31.177922 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:49:41.177781 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:49:51.177890 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:50:01.177918 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:50:11.178584 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:50:21.177719 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:50:31.177896 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:50:41.177729 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:50:51.177933 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:51:01.178030 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:51:11.178112 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:51:21.177943 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:51:27.640698 I | mvcc: store.index: compact 6803
2020-11-13 05:51:27.641313 I | mvcc: finished scheduled compaction at 6803 (took 272.812µs)
2020-11-13 05:51:31.178084 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:51:41.177906 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:51:51.177947 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:52:01.177819 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:52:11.177927 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:52:21.178128 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:52:31.178183 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:52:41.177784 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:52:51.177938 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:53:01.177849 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:53:11.177778 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:53:21.177970 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:53:31.177868 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:53:37.382606 I | etcdserver: start to snapshot (applied: 10001, lastsnap: 0)
2020-11-13 05:53:37.386508 I | etcdserver: saved snapshot at index 10001
2020-11-13 05:53:37.389949 I | etcdserver: compacted raft log at 5001
2020-11-13 05:53:41.178037 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:53:51.178157 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:54:01.178146 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:54:11.177897 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:54:21.177909 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:54:31.178078 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:54:41.177894 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:54:51.177787 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:55:01.177796 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:55:11.177967 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:55:21.178136 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:55:31.177882 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:55:41.178069 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:55:51.178283 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:56:01.178155 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:56:11.178092 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:56:21.177794 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:56:27.644586 I | mvcc: store.index: compact 7014
2020-11-13 05:56:27.645956 I | mvcc: finished scheduled compaction at 7014 (took 537.681µs)
2020-11-13 05:56:31.177839 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:56:41.177718 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:56:51.177886 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:57:01.179174 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:57:11.177968 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:57:21.178064 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:57:31.177974 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:57:41.177744 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:57:51.177706 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:58:01.178480 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:58:11.177924 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:58:21.177947 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:58:31.178054 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:58:41.177942 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:58:51.177840 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:59:01.177862 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:59:11.177774 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:59:21.177839 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:59:31.178002 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:59:41.177946 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 05:59:51.177948 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:00:01.178047 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:00:11.177966 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:00:21.177819 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:00:31.177794 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:00:41.177761 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:00:51.177788 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:01:01.178232 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:01:11.177874 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:01:21.177957 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:01:27.648608 I | mvcc: store.index: compact 7225
2020-11-13 06:01:27.649052 I | mvcc: finished scheduled compaction at 7225 (took 288.664µs)
2020-11-13 06:01:31.177952 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:01:41.177753 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:01:51.178239 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:02:01.177844 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:02:11.177944 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:02:21.183437 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:02:31.177849 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:02:41.178131 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:02:51.177858 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:03:01.177930 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:03:11.177837 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:03:21.177968 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:03:31.178060 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:03:41.185197 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:03:51.178123 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:04:01.177834 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:04:11.177844 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:04:21.177795 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:04:31.177918 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:04:41.178063 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:04:51.177884 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:05:01.177845 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:05:11.177905 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:05:21.177823 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:05:31.177995 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:05:41.177648 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:05:51.177935 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:06:01.177873 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:06:11.177938 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:06:21.178039 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:06:27.652126 I | mvcc: store.index: compact 7437
2020-11-13 06:06:27.652641 I | mvcc: finished scheduled compaction at 7437 (took 329.552µs)
2020-11-13 06:06:31.177780 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:06:41.177889 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:06:51.177927 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:07:01.177813 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:07:11.177922 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:07:21.177856 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:07:31.177975 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:07:41.177693 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:07:51.177737 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:08:01.177754 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:08:11.177706 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:08:21.177692 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:08:31.200042 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:08:41.177782 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:08:51.177680 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:09:01.177771 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:09:11.177877 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:09:21.177814 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:09:31.177925 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:09:41.177902 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:09:51.177841 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:10:01.177939 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:10:11.177877 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:10:21.177899 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:10:31.177813 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:10:41.178067 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:10:51.177841 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:11:01.177773 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:11:11.177924 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:11:21.177945 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:11:27.657593 I | mvcc: store.index: compact 7648
2020-11-13 06:11:27.658309 I | mvcc: finished scheduled compaction at 7648 (took 544.514µs)
2020-11-13 06:11:31.177820 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:11:41.177901 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:11:51.177952 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:12:01.177889 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:12:11.177938 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:12:21.177730 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:12:31.177848 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:12:41.177926 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:12:51.177914 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:13:01.177901 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:13:11.178068 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:13:21.177742 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:13:31.178117 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:13:41.178173 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:13:51.178140 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:14:01.177748 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:14:11.178062 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:14:21.177815 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:14:31.177909 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:14:41.177791 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:14:51.177741 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:15:01.177931 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:15:11.177770 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:15:21.177896 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:15:31.177974 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:15:41.177788 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:15:51.178109 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:16:01.178069 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:16:11.177760 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:16:21.177748 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:16:27.661720 I | mvcc: store.index: compact 7859
2020-11-13 06:16:27.662466 I | mvcc: finished scheduled compaction at 7859 (took 547.852µs)
2020-11-13 06:16:31.177927 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:16:41.177830 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:16:51.177829 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:17:01.177808 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:17:11.177860 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:17:21.177885 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:17:31.177876 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:17:41.177775 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:17:51.178089 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:18:01.177950 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:18:11.177895 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:18:21.177945 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:18:31.177921 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:18:41.177734 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:18:51.177927 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:19:01.177887 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:19:11.177944 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:19:21.177918 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:19:31.178043 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:19:41.177929 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:19:51.178078 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:20:01.177916 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:20:11.178081 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:20:21.177871 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:20:31.178060 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:20:41.178101 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:20:51.178467 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:21:01.177794 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:21:11.178230 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:21:21.178119 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:21:27.666565 I | mvcc: store.index: compact 8071
2020-11-13 06:21:27.667616 I | mvcc: finished scheduled compaction at 8071 (took 431.729µs)
2020-11-13 06:21:31.177839 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:21:41.178051 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:21:51.177830 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:22:01.178048 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:22:11.177916 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:22:21.177920 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:22:31.177757 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:22:41.177742 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:22:51.177786 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:23:01.177586 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:23:11.178001 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:23:21.177886 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:23:31.178232 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:23:41.177835 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:23:51.177907 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:24:01.177933 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:24:11.177912 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:24:21.177924 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:24:31.177801 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:24:41.178014 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:24:51.177801 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:25:01.177861 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:25:11.178033 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:25:21.178043 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:25:31.177764 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:25:41.177877 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:25:51.177918 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:26:01.177922 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:26:11.177854 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:26:21.178198 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:26:27.670574 I | mvcc: store.index: compact 8282
2020-11-13 06:26:27.671435 I | mvcc: finished scheduled compaction at 8282 (took 395.939µs)
2020-11-13 06:26:31.178090 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:26:41.178166 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:26:51.177861 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:27:01.177835 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:27:11.177890 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:27:21.177997 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:27:31.178016 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:27:41.177761 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:27:51.177693 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:28:01.177974 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:28:11.178317 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:28:21.177857 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:28:31.177908 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:28:41.177901 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:28:51.177820 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:29:01.177668 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:29:11.177709 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:29:21.177780 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:29:31.177772 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:29:41.177772 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:29:51.178025 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:30:01.178173 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:30:11.177861 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:30:21.177790 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:30:31.177928 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:30:41.177756 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:30:51.179963 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:31:01.177737 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:31:11.177625 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:31:21.178016 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:31:27.674437 I | mvcc: store.index: compact 8493
2020-11-13 06:31:27.675580 I | mvcc: finished scheduled compaction at 8493 (took 600.442µs)
2020-11-13 06:31:31.178133 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:31:41.177891 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:31:51.178090 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:32:01.177820 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:32:11.177869 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:32:21.178015 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:32:31.178431 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:32:41.177848 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:32:51.177791 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:33:01.177764 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:33:11.177849 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:33:21.177801 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:33:31.177893 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:33:41.178046 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:33:51.178086 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:34:01.177738 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:34:11.177868 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:34:21.177808 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:34:31.178206 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:34:41.178193 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:34:51.178042 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:35:01.177767 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:35:11.178186 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:35:21.177960 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:35:31.177913 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:35:41.177869 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:35:51.178031 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:36:01.177707 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:36:11.177840 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:36:21.177835 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:36:27.679419 I | mvcc: store.index: compact 8705
2020-11-13 06:36:27.680308 I | mvcc: finished scheduled compaction at 8705 (took 357.566µs)
2020-11-13 06:36:31.178110 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:36:41.178056 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:36:51.177916 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:37:01.177903 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:37:11.177804 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:37:21.178204 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:37:31.177941 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:37:41.177755 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:37:51.177795 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:38:01.177875 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:38:11.177867 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:38:21.177730 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:38:31.177818 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:38:41.177865 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:38:51.177710 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:39:01.177860 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:39:11.177734 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:39:21.177829 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:39:31.177880 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:39:41.177905 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:39:51.177826 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:40:01.178051 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:40:11.177828 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:40:21.177789 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:40:31.177757 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:40:41.177798 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:40:51.178167 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:41:01.178329 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:41:11.177781 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:41:21.177865 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:41:27.683505 I | mvcc: store.index: compact 8916
2020-11-13 06:41:27.684442 I | mvcc: finished scheduled compaction at 8916 (took 650.677µs)
2020-11-13 06:41:31.178085 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:41:41.177964 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:41:51.178196 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:42:01.178079 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:42:11.178044 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:42:21.178279 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:42:31.178326 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:42:41.178330 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:42:51.177908 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:43:01.177843 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:43:11.178122 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:43:21.178120 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:43:31.178035 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:43:41.178029 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:43:51.178120 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:44:01.177754 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:44:11.177664 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:44:21.177839 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:44:31.177893 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:44:41.177847 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:44:51.177886 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:45:01.178090 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:45:11.177734 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:45:21.177741 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:45:31.177788 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:45:41.178160 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:45:51.177665 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:46:01.177832 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:46:11.177967 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:46:21.178039 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:46:27.690054 I | mvcc: store.index: compact 9127
2020-11-13 06:46:27.691207 I | mvcc: finished scheduled compaction at 9127 (took 529.475µs)
2020-11-13 06:46:31.178178 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:46:41.177894 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:46:51.177849 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:47:01.178022 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:47:11.177865 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:47:21.178049 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:47:31.177901 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:47:41.177732 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:47:51.178026 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:48:01.178231 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:48:11.177581 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:48:21.177872 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:48:31.177755 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:48:41.177925 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:48:51.177841 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:49:01.177912 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:49:11.177799 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:49:21.177964 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:49:31.177644 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:49:41.177686 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:49:51.178101 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:50:01.177871 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:50:11.177848 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:50:21.177780 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:50:31.177869 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:50:41.177804 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:50:51.178084 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:51:01.177913 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:51:11.178366 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:51:21.177812 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:51:27.707973 I | mvcc: store.index: compact 9339
2020-11-13 06:51:27.708617 I | mvcc: finished scheduled compaction at 9339 (took 335.703µs)
2020-11-13 06:51:31.177965 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:51:41.177816 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:51:51.177895 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:52:01.177827 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:52:11.177824 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:52:21.177813 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:52:31.177957 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:52:41.178014 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:52:51.177840 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:53:01.177702 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:53:11.177884 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:53:21.178125 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:53:31.177950 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:53:41.177885 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:53:51.177915 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:54:01.177732 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:54:11.177883 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:54:21.177819 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:54:31.178253 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:54:41.178075 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:54:51.178044 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:55:01.177956 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:55:11.177794 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:55:21.177758 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:55:31.178067 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:55:41.178455 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:55:51.177737 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:56:01.177798 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:56:11.177933 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:56:21.177909 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:56:27.722092 I | mvcc: store.index: compact 9550
2020-11-13 06:56:27.722975 I | mvcc: finished scheduled compaction at 9550 (took 680.004µs)
2020-11-13 06:56:31.177940 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:56:41.178327 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:56:51.177968 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:57:01.178050 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:57:11.177928 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:57:21.177807 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:57:31.177831 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:57:41.177827 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:57:51.177831 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:58:01.178146 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:58:11.178073 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:58:21.178096 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:58:31.177819 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:58:41.177811 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:58:51.177972 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:59:01.178029 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:59:11.177840 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:59:21.177905 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:59:31.177642 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:59:41.178039 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 06:59:51.178094 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:00:01.177978 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:00:11.177730 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:00:21.177815 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:00:31.178162 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:00:41.177970 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:00:51.178167 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:01:01.178171 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:01:11.178020 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:01:21.177912 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:01:27.727129 I | mvcc: store.index: compact 9761
2020-11-13 07:01:27.728098 I | mvcc: finished scheduled compaction at 9761 (took 738.806µs)
2020-11-13 07:01:31.177949 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:01:41.177826 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:01:51.177976 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:02:01.177822 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:02:11.177789 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:02:21.177840 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:02:31.177739 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:02:41.177878 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:02:51.177826 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:03:01.177899 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:03:11.178503 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:03:21.177745 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:03:31.177823 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:03:41.177888 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:03:51.178142 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:04:01.177856 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:04:11.177685 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:04:21.178038 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:04:31.177794 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:04:41.178090 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:04:51.177723 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:05:01.177728 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:05:11.177941 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:05:21.178034 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:05:31.177769 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:05:41.177844 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:05:51.177953 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:06:01.177881 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:06:11.177777 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:06:21.177620 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:06:27.742216 I | mvcc: store.index: compact 9973
2020-11-13 07:06:27.743010 I | mvcc: finished scheduled compaction at 9973 (took 588.979µs)
2020-11-13 07:06:31.177968 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:06:41.177796 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:06:51.177815 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:07:01.177743 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:07:11.177906 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:07:21.177926 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:07:31.177926 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:07:41.178015 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:07:51.177963 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:08:01.177954 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:08:11.177766 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:08:21.177891 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:08:31.177810 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:08:41.177881 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:08:51.180522 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:09:01.177900 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:09:11.177920 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:09:21.178029 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:09:31.177812 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:09:41.178041 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:09:51.177839 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:10:01.177867 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:10:11.177977 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:10:21.177847 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:10:31.178028 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:10:41.177961 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:10:51.177835 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:11:01.177855 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:11:11.177846 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:11:21.177795 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:11:27.760079 I | mvcc: store.index: compact 10184
2020-11-13 07:11:27.760936 I | mvcc: finished scheduled compaction at 10184 (took 720.512µs)
2020-11-13 07:11:31.178037 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:11:41.177769 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:11:51.178037 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:12:01.177852 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:12:11.177935 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:12:21.177909 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:12:31.177966 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:12:41.177882 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:12:51.179330 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:13:01.177974 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:13:11.177780 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:13:21.177868 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:13:31.177962 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:13:41.177895 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:13:51.177977 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:14:01.177763 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:14:11.177783 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:14:21.177857 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:14:31.177918 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:14:41.178059 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:14:51.177899 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:15:01.177899 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:15:11.177796 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:15:21.178090 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:15:31.178247 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:15:41.177954 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:15:51.178148 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:16:01.177750 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:16:11.177972 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:16:21.177797 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:16:27.766296 I | mvcc: store.index: compact 10395
2020-11-13 07:16:27.767605 I | mvcc: finished scheduled compaction at 10395 (took 631.081µs)
2020-11-13 07:16:31.178552 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:16:41.177890 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:16:51.177887 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:17:01.177913 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:17:11.177868 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:17:21.178232 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:17:31.177732 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:17:41.177791 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:17:51.177934 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:18:01.177820 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:18:11.178191 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:18:21.177886 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:18:31.177710 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:18:41.177786 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:18:51.177860 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:19:01.177883 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:19:11.177775 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:19:21.177724 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:19:31.177761 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:19:41.177779 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:19:51.177941 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:20:01.177753 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:20:11.178042 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:20:21.177857 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:20:31.177961 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:20:41.177629 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:20:51.178006 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:21:01.177724 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:21:11.177815 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:21:21.178061 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:21:27.771175 I | mvcc: store.index: compact 10607
2020-11-13 07:21:27.771790 I | mvcc: finished scheduled compaction at 10607 (took 403.935µs)
2020-11-13 07:21:31.177877 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:21:41.177796 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:21:51.177851 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:22:01.177899 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:22:11.177853 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:22:21.178180 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:22:31.177864 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:22:41.177761 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:22:51.178143 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:23:01.177784 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:23:11.178323 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:23:21.177818 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:23:31.177809 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:23:41.177915 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:23:51.177811 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:24:01.177952 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:24:11.177914 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:24:21.178099 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:24:31.178171 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:24:41.178061 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:24:51.178392 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:25:01.177811 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:25:11.178008 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:25:21.177869 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:25:31.178149 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:25:41.178025 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:25:51.177978 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:26:01.177858 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:26:11.178301 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:26:21.177894 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:26:27.776576 I | mvcc: store.index: compact 10818
2020-11-13 07:26:27.777613 I | mvcc: finished scheduled compaction at 10818 (took 502.333µs)
2020-11-13 07:26:31.178110 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:26:41.178187 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:26:51.178090 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:27:01.178069 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:27:11.177711 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:27:21.178236 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:27:31.178146 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:27:41.177878 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:27:51.178139 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:28:01.177759 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:28:11.177886 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:28:21.178028 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:28:31.178005 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:28:41.178132 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:28:51.177862 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:29:01.177923 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:29:11.178386 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:29:21.177948 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:29:31.178171 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:29:41.178113 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:29:51.178035 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:30:01.178082 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:30:11.178081 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:30:21.178086 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:30:31.178297 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:30:41.178760 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:30:51.178121 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:31:01.178367 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:31:11.177874 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:31:21.177891 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:31:27.780962 I | mvcc: store.index: compact 11029
2020-11-13 07:31:27.781829 I | mvcc: finished scheduled compaction at 11029 (took 653.283µs)
2020-11-13 07:31:31.178070 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:31:41.177941 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:31:51.178047 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:32:01.177939 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:32:11.177636 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:32:21.178134 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:32:31.177878 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:32:41.178037 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:32:51.178131 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:32:52.791884 W | etcdserver: request "header:<ID:14653998221483429001 > lease_revoke:<id:4b5d75be02b9cc49>" with result "size:28" took too long (416.017919ms) to execute
2020-11-13 07:32:58.239436 W | etcdserver: request "header:<ID:14653998221483429022 username:\"kube-apiserver-etcd-client\" auth_revision:1 > txn:<compare:<target:MOD key:\"/registry/masterleases/192.168.39.244\" mod_revision:11296 > success:<request_put:<key:\"/registry/masterleases/192.168.39.244\" value_size:70 lease:5430626184628653212 >> failure:<request_range:<key:\"/registry/masterleases/192.168.39.244\" > >>" with result "size:16" took too long (760.011388ms) to execute
2020-11-13 07:32:58.240816 W | etcdserver: read-only range request "key:\"/registry/volumeattachments\" range_end:\"/registry/volumeattachmentt\" count_only:true " with result "range_response_count:0 size:5" took too long (835.460122ms) to execute
2020-11-13 07:32:58.243600 W | etcdserver: read-only range request "key:\"/registry/ingress\" range_end:\"/registry/ingrest\" count_only:true " with result "range_response_count:0 size:5" took too long (286.661363ms) to execute
2020-11-13 07:32:58.243802 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (545.809094ms) to execute
2020-11-13 07:32:58.244684 W | etcdserver: read-only range request "key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" " with result "range_response_count:1 size:601" took too long (377.286384ms) to execute
2020-11-13 07:33:01.177900 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:33:11.177767 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:33:15.416335 W | wal: sync duration of 1.071562564s, expected less than 1s
2020-11-13 07:33:15.416649 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (717.943356ms) to execute
2020-11-13 07:33:15.424393 W | etcdserver: read-only range request "key:\"/registry/validatingwebhookconfigurations\" range_end:\"/registry/validatingwebhookconfigurationt\" count_only:true " with result "range_response_count:0 size:5" took too long (127.907962ms) to execute
2020-11-13 07:33:21.177888 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:33:31.178185 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:33:39.183369 W | etcdserver: read-only range request "key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" " with result "range_response_count:1 size:601" took too long (734.008321ms) to execute
2020-11-13 07:33:39.183951 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (487.667166ms) to execute
2020-11-13 07:33:41.177668 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:33:51.177942 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:33:56.332596 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (633.483925ms) to execute
2020-11-13 07:33:56.333360 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (908.342774ms) to execute
2020-11-13 07:33:56.333523 W | etcdserver: read-only range request "key:\"/registry/events\" range_end:\"/registry/eventt\" count_only:true " with result "range_response_count:0 size:5" took too long (665.851153ms) to execute
2020-11-13 07:33:56.333832 W | etcdserver: read-only range request "key:\"/registry/csidrivers\" range_end:\"/registry/csidrivert\" count_only:true " with result "range_response_count:0 size:5" took too long (558.873997ms) to execute
2020-11-13 07:34:01.177911 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:34:09.565073 W | etcdserver: read-only range request "key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" " with result "range_response_count:1 size:601" took too long (222.499509ms) to execute
2020-11-13 07:34:09.565752 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (863.791432ms) to execute
2020-11-13 07:34:11.178133 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:34:21.178094 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:34:31.178060 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:34:41.177881 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:34:51.177914 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:34:53.700645 W | etcdserver: read-only range request "key:\"/registry/horizontalpodautoscalers\" range_end:\"/registry/horizontalpodautoscalert\" count_only:true " with result "range_response_count:0 size:5" took too long (1.449872433s) to execute
2020-11-13 07:34:53.701200 W | etcdserver: request "header:<ID:14653998221483429505 > lease_revoke:<id:4b5d75be02b9ce3e>" with result "size:28" took too long (872.779117ms) to execute
2020-11-13 07:34:53.701608 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (1.002659863s) to execute
2020-11-13 07:34:53.701690 W | etcdserver: read-only range request "key:\"/registry/secrets\" range_end:\"/registry/secrett\" count_only:true " with result "range_response_count:0 size:7" took too long (118.76862ms) to execute
2020-11-13 07:35:01.177866 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:35:04.414886 W | etcdserver: read-only range request "key:\"/registry/horizontalpodautoscalers\" range_end:\"/registry/horizontalpodautoscalert\" count_only:true " with result "range_response_count:0 size:5" took too long (275.591108ms) to execute
2020-11-13 07:35:11.177845 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:35:21.177882 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:35:27.089629 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (391.813624ms) to execute
2020-11-13 07:35:27.090015 W | etcdserver: read-only range request "key:\"/registry/ingressclasses\" range_end:\"/registry/ingressclasset\" count_only:true " with result "range_response_count:0 size:5" took too long (177.065109ms) to execute
2020-11-13 07:35:31.177870 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:35:41.177872 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:35:42.656897 W | etcdserver: request "header:<ID:14653998221483429725 > lease_revoke:<id:4b5d75be02b9cf15>" with result "size:28" took too long (212.003099ms) to execute
2020-11-13 07:35:49.332786 W | wal: sync duration of 1.065582896s, expected less than 1s
2020-11-13 07:35:49.334690 W | etcdserver: request "header:<ID:14653998221483429747 username:\"kube-apiserver-etcd-client\" auth_revision:1 > txn:<compare:<target:MOD key:\"/registry/masterleases/192.168.39.244\" mod_revision:11414 > success:<request_put:<key:\"/registry/masterleases/192.168.39.244\" value_size:70 lease:5430626184628653937 >> failure:<request_range:<key:\"/registry/masterleases/192.168.39.244\" > >>" with result "size:16" took too long (1.067296752s) to execute
2020-11-13 07:35:49.335148 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (1.635850532s) to execute
2020-11-13 07:35:49.337032 W | etcdserver: read-only range request "key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" " with result "range_response_count:1 size:601" took too long (1.199118962s) to execute
2020-11-13 07:35:51.177958 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:36:01.178294 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:36:11.178277 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:36:21.178210 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:36:27.784894 I | mvcc: store.index: compact 11240
2020-11-13 07:36:27.785542 I | mvcc: finished scheduled compaction at 11240 (took 421.208µs)
2020-11-13 07:36:30.772043 W | wal: sync duration of 1.400355426s, expected less than 1s
2020-11-13 07:36:30.773119 W | etcdserver: read-only range request "key:\"/registry/controllerrevisions\" range_end:\"/registry/controllerrevisiont\" count_only:true " with result "range_response_count:0 size:7" took too long (847.379198ms) to execute
2020-11-13 07:36:30.773713 W | etcdserver: read-only range request "key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" " with result "range_response_count:1 size:601" took too long (1.21877122s) to execute
2020-11-13 07:36:30.774076 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (1.075705842s) to execute
2020-11-13 07:36:30.774497 W | etcdserver: read-only range request "key:\"/registry/storageclasses\" range_end:\"/registry/storageclasset\" count_only:true " with result "range_response_count:0 size:7" took too long (157.744386ms) to execute
2020-11-13 07:36:31.177790 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:36:41.177734 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:36:42.939349 W | etcdserver: read-only range request "key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" " with result "range_response_count:1 size:601" took too long (110.795918ms) to execute
2020-11-13 07:36:42.939437 W | etcdserver: read-only range request "key:\"/registry/horizontalpodautoscalers\" range_end:\"/registry/horizontalpodautoscalert\" count_only:true " with result "range_response_count:0 size:5" took too long (219.749465ms) to execute
2020-11-13 07:36:42.940280 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (241.481345ms) to execute
2020-11-13 07:36:51.178186 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:36:52.926623 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (228.482904ms) to execute
2020-11-13 07:37:01.177786 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:37:11.302452 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:37:12.033900 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (334.627849ms) to execute
2020-11-13 07:37:21.177784 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:37:31.177601 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:37:38.088430 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (389.94309ms) to execute
2020-11-13 07:37:38.088915 W | etcdserver: read-only range request "key:\"/registry/namespaces/default\" " with result "range_response_count:1 size:257" took too long (819.479049ms) to execute
2020-11-13 07:37:41.177795 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:37:51.177736 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:38:01.177887 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:38:10.720668 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (1.022286939s) to execute
2020-11-13 07:38:11.177936 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:38:15.562596 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (137.059812ms) to execute
2020-11-13 07:38:21.178591 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:38:29.091327 W | wal: sync duration of 1.633928044s, expected less than 1s
2020-11-13 07:38:29.135924 W | etcdserver: request "header:<ID:14653998221483430417 username:\"kube-apiserver-etcd-client\" auth_revision:1 > txn:<compare:<target:MOD key:\"/registry/masterleases/192.168.39.244\" mod_revision:11526 > success:<request_put:<key:\"/registry/masterleases/192.168.39.244\" value_size:70 lease:5430626184628654607 >> failure:<request_range:<key:\"/registry/masterleases/192.168.39.244\" > >>" with result "size:16" took too long (1.678299925s) to execute
2020-11-13 07:38:29.136284 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (1.436808711s) to execute
2020-11-13 07:38:29.136600 W | etcdserver: read-only range request "key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" " with result "range_response_count:1 size:601" took too long (1.722271836s) to execute
2020-11-13 07:38:29.136920 W | etcdserver: read-only range request "key:\"/registry/priorityclasses\" range_end:\"/registry/priorityclasset\" count_only:true " with result "range_response_count:0 size:7" took too long (629.186228ms) to execute
2020-11-13 07:38:29.137223 W | etcdserver: read-only range request "key:\"/registry/ranges/serviceips\" " with result "range_response_count:1 size:118" took too long (1.110791819s) to execute
2020-11-13 07:38:29.137582 W | etcdserver: read-only range request "key:\"/registry/ranges/servicenodeports\" " with result "range_response_count:1 size:120" took too long (1.112905572s) to execute
2020-11-13 07:38:31.177782 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:38:41.177879 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:38:49.041949 W | etcdserver: read-only range request "key:\"/registry/rolebindings\" range_end:\"/registry/rolebindingt\" count_only:true " with result "range_response_count:0 size:7" took too long (278.848515ms) to execute
2020-11-13 07:38:49.042275 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (1.342930679s) to execute
2020-11-13 07:38:49.042478 W | etcdserver: read-only range request "key:\"/registry/namespaces/default\" " with result "range_response_count:1 size:257" took too long (1.771956407s) to execute
2020-11-13 07:38:49.042684 W | etcdserver: read-only range request "key:\"/registry/apiextensions.k8s.io/customresourcedefinitions\" range_end:\"/registry/apiextensions.k8s.io/customresourcedefinitiont\" count_only:true " with result "range_response_count:0 size:5" took too long (1.660174869s) to execute
2020-11-13 07:38:51.177781 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:39:01.177723 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:39:11.177789 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:39:21.177897 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:39:30.756088 W | wal: sync duration of 1.330881993s, expected less than 1s
2020-11-13 07:39:31.003659 W | etcdserver: request "header:<ID:14653998221483430689 username:\"kube-apiserver-etcd-client\" auth_revision:1 > txn:<compare:<target:MOD key:\"/registry/leases/kube-node-lease/minikube\" mod_revision:11570 > success:<request_put:<key:\"/registry/leases/kube-node-lease/minikube\" value_size:536 >> failure:<request_range:<key:\"/registry/leases/kube-node-lease/minikube\" > >>" with result "size:16" took too long (247.357316ms) to execute
2020-11-13 07:39:31.003843 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (1.304436767s) to execute
2020-11-13 07:39:31.177967 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:39:41.178079 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:39:51.177848 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:40:01.439144 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:40:09.985095 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (285.897102ms) to execute
2020-11-13 07:40:11.177928 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:40:21.177949 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:40:30.698726 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "error:context canceled" took too long (1.999888438s) to execute
WARNING: 2020/11/13 07:40:30 grpc: Server.processUnaryRPC failed to write status: connection error: desc = "transport is closing"
2020-11-13 07:40:32.045132 W | wal: sync duration of 4.313820628s, expected less than 1s
2020-11-13 07:40:32.172105 W | etcdserver: request "header:<ID:14653998221483430933 username:\"kube-apiserver-etcd-client\" auth_revision:1 > lease_grant:<ttl:3660-second id:4b5d75be02b9d414>" with result "size:41" took too long (126.659809ms) to execute
2020-11-13 07:40:32.172450 W | etcdserver: read-only range request "key:\"/registry/leases\" range_end:\"/registry/leaset\" count_only:true " with result "range_response_count:0 size:7" took too long (3.406930286s) to execute
2020-11-13 07:40:32.173194 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:40:32.173637 W | etcdserver: read-only range request "key:\"/registry/storageclasses\" range_end:\"/registry/storageclasset\" count_only:true " with result "range_response_count:0 size:7" took too long (353.464265ms) to execute
2020-11-13 07:40:32.173847 W | etcdserver: read-only range request "key:\"/registry/rolebindings\" range_end:\"/registry/rolebindingt\" count_only:true " with result "range_response_count:0 size:7" took too long (624.367552ms) to execute
2020-11-13 07:40:32.173954 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (1.467650946s) to execute
2020-11-13 07:40:32.174124 W | etcdserver: read-only range request "key:\"/registry/events\" range_end:\"/registry/eventt\" count_only:true " with result "range_response_count:0 size:5" took too long (1.797915789s) to execute
2020-11-13 07:40:32.174263 W | etcdserver: read-only range request "key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" " with result "range_response_count:1 size:601" took too long (2.438733334s) to execute
2020-11-13 07:40:32.174418 W | etcdserver: read-only range request "key:\"/registry/cronjobs\" range_end:\"/registry/cronjobt\" count_only:true " with result "range_response_count:0 size:5" took too long (3.017236641s) to execute
2020-11-13 07:40:32.174586 W | etcdserver: read-only range request "key:\"/registry/configmaps\" range_end:\"/registry/configmapt\" count_only:true " with result "range_response_count:0 size:7" took too long (3.154407275s) to execute
2020-11-13 07:40:32.174726 W | etcdserver: read-only range request "key:\"/registry/events\" range_end:\"/registry/eventt\" count_only:true " with result "range_response_count:0 size:5" took too long (3.163863519s) to execute
2020-11-13 07:40:41.177925 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:40:50.782254 W | etcdserver: read-only range request "key:\"/registry/csinodes\" range_end:\"/registry/csinodet\" count_only:true " with result "range_response_count:0 size:7" took too long (450.132828ms) to execute
2020-11-13 07:40:51.177954 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:40:56.540915 W | wal: sync duration of 2.245085453s, expected less than 1s
2020-11-13 07:40:56.576188 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (1.151057519s) to execute
2020-11-13 07:40:56.576682 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (1.878893818s) to execute
2020-11-13 07:40:56.577071 W | etcdserver: read-only range request "key:\"/registry/jobs/\" range_end:\"/registry/jobs0\" limit:500 " with result "range_response_count:0 size:5" took too long (1.978432623s) to execute
2020-11-13 07:40:56.577456 W | etcdserver: read-only range request "key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" " with result "range_response_count:1 size:601" took too long (277.241324ms) to execute
2020-11-13 07:40:56.577784 W | etcdserver: read-only range request "key:\"/registry/certificatesigningrequests\" range_end:\"/registry/certificatesigningrequestt\" count_only:true " with result "range_response_count:0 size:5" took too long (831.190889ms) to execute
2020-11-13 07:41:01.177836 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:41:11.177890 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:41:11.781255 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (1.083991322s) to execute
2020-11-13 07:41:11.781479 W | etcdserver: read-only range request "key:\"/registry/clusterrolebindings\" range_end:\"/registry/clusterrolebindingt\" count_only:true " with result "range_response_count:0 size:7" took too long (639.659629ms) to execute
2020-11-13 07:41:17.608232 W | etcdserver: read-only range request "key:\"/registry/namespaces\" range_end:\"/registry/namespacet\" count_only:true " with result "range_response_count:0 size:7" took too long (338.242391ms) to execute
2020-11-13 07:41:17.608718 W | etcdserver: read-only range request "key:\"/registry/horizontalpodautoscalers\" range_end:\"/registry/horizontalpodautoscalert\" count_only:true " with result "range_response_count:0 size:5" took too long (387.037264ms) to execute
2020-11-13 07:41:17.609025 W | etcdserver: read-only range request "key:\"/registry/namespaces/default\" " with result "range_response_count:1 size:257" took too long (336.120265ms) to execute
2020-11-13 07:41:17.609201 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (912.055607ms) to execute
2020-11-13 07:41:21.178233 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:41:27.790618 I | mvcc: store.index: compact 11450
2020-11-13 07:41:27.791303 I | mvcc: finished scheduled compaction at 11450 (took 395.407µs)
2020-11-13 07:41:31.178162 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:41:34.703914 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "error:context deadline exceeded" took too long (2.004662684s) to execute
2020-11-13 07:41:34.975032 W | wal: sync duration of 2.75646902s, expected less than 1s
2020-11-13 07:41:35.548639 W | etcdserver: request "header:<ID:14653998221483431195 > lease_revoke:<id:4b5d75be02b9d4d7>" with result "size:28" took too long (573.423184ms) to execute
2020-11-13 07:41:35.549116 W | etcdserver: read-only range request "key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" " with result "range_response_count:1 size:601" took too long (2.802687511s) to execute
2020-11-13 07:41:35.549832 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (126.184297ms) to execute
2020-11-13 07:41:35.550256 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (844.657381ms) to execute
2020-11-13 07:41:35.550568 W | etcdserver: read-only range request "key:\"/registry/volumeattachments\" range_end:\"/registry/volumeattachmentt\" count_only:true " with result "range_response_count:0 size:5" took too long (1.47887631s) to execute
2020-11-13 07:41:41.177677 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:41:51.177794 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:41:51.903813 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (204.898416ms) to execute
2020-11-13 07:41:51.904743 W | etcdserver: read-only range request "key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" " with result "range_response_count:1 size:601" took too long (276.971557ms) to execute
2020-11-13 07:41:52.963998 W | wal: sync duration of 1.053068059s, expected less than 1s
2020-11-13 07:41:52.965579 W | etcdserver: read-only range request "key:\"/registry/priorityclasses\" range_end:\"/registry/priorityclasset\" count_only:true " with result "range_response_count:0 size:7" took too long (869.025456ms) to execute
2020-11-13 07:41:52.970361 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (271.736628ms) to execute
2020-11-13 07:42:01.177839 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:42:10.698126 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "error:context deadline exceeded" took too long (1.999965168s) to execute
2020-11-13 07:42:11.896292 W | wal: sync duration of 3.915500283s, expected less than 1s
2020-11-13 07:42:11.908406 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:42:11.909907 W | etcdserver: read-only range request "key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" " with result "range_response_count:1 size:601" took too long (1.923687336s) to execute
2020-11-13 07:42:11.909958 W | etcdserver: read-only range request "key:\"/registry/services/specs\" range_end:\"/registry/services/spect\" count_only:true " with result "range_response_count:0 size:7" took too long (230.411509ms) to execute
2020-11-13 07:42:11.910106 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (1.205673935s) to execute
2020-11-13 07:42:11.910320 W | etcdserver: read-only range request "key:\"/registry/storageclasses\" range_end:\"/registry/storageclasset\" count_only:true " with result "range_response_count:0 size:7" took too long (1.664584615s) to execute
2020-11-13 07:42:21.178762 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:42:31.177873 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:42:41.178022 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:42:51.178241 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:43:01.177683 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:43:11.177871 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:43:21.177919 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-11-13 07:43:31.177902 I | etcdserver/api/etcdhttp: /health OK (status code 200)
==== END logs for container etcd of pod kube-system/etcd-minikube ====
==== START logs for container kube-apiserver of pod kube-system/kube-apiserver-minikube ====
Flag --insecure-port has been deprecated, This flag will be removed in a future version.
I1112 19:50:49.988539       1 server.go:625] external host was not specified, using 192.168.39.244
I1112 19:50:49.989359       1 server.go:163] Version: v1.19.2
I1112 19:50:50.403309       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I1112 19:50:50.403667       1 plugins.go:161] Loaded 10 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
I1112 19:50:50.407616       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I1112 19:50:50.407869       1 plugins.go:161] Loaded 10 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
I1112 19:50:50.412975       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:50.413025       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
W1112 19:50:50.415269       1 clientconn.go:1223] grpc: addrConn.createTransport failed to connect to {https://127.0.0.1:2379  <nil> 0 <nil>}. Err :connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused". Reconnecting...
I1112 19:50:51.398422       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.398443       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.681952       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.681973       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.694816       1 client.go:360] parsed scheme: "passthrough"
I1112 19:50:51.694851       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 19:50:51.694954       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 19:50:51.695471       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.695508       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.722305       1 master.go:271] Using reconciler: lease
I1112 19:50:51.722663       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.722678       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.731548       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.731566       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.738854       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.738911       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.750502       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.750520       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.756812       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.756834       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.761865       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.761882       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.769784       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.769877       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.775552       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.775622       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.781627       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.781676       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.787842       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.787897       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.794282       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.794300       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.801574       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.801594       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.808231       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.808294       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.813192       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.813206       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.818412       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.818427       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.823199       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.823213       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.829903       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.829932       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.839164       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.839240       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.919457       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.919483       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.926916       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.927344       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.933108       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.933209       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.940861       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.940879       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.946783       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.947003       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.953015       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.953086       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.958548       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.958570       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.974581       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.974659       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.986897       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.986917       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:51.993556       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:51.993574       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.001991       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.002012       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.007957       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.008059       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.015751       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.015772       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.022378       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.022396       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.028862       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.028877       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.034503       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.034580       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.041036       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.041054       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.049270       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.049360       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.056806       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.057037       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.063191       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.063276       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.070755       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.070835       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.078870       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.078885       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.085611       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.085625       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.092907       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.092935       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.098381       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.098396       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.103487       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.103503       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.112792       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.112808       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.118873       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.118904       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.124323       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.124340       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.130081       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.130185       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.136309       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.136330       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.143721       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.143741       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.150377       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.150396       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.155511       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.155530       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.164419       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.164436       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.170670       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.170695       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.177244       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.177258       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.183791       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.183805       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.191682       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.191703       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.199001       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.199018       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.204684       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.204700       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.210514       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.210528       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.217477       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.217499       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.225283       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.225372       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.231288       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.231304       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.236867       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.243057       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.248412       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.248438       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.264604       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.264757       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
W1112 19:50:52.350292       1 genericapiserver.go:412] Skipping API batch/v2alpha1 because it has no resources.
W1112 19:50:52.360608       1 genericapiserver.go:412] Skipping API discovery.k8s.io/v1alpha1 because it has no resources.
W1112 19:50:52.405835       1 genericapiserver.go:412] Skipping API node.k8s.io/v1alpha1 because it has no resources.
W1112 19:50:52.422477       1 genericapiserver.go:412] Skipping API rbac.authorization.k8s.io/v1alpha1 because it has no resources.
W1112 19:50:52.426864       1 genericapiserver.go:412] Skipping API scheduling.k8s.io/v1alpha1 because it has no resources.
W1112 19:50:52.437140       1 genericapiserver.go:412] Skipping API storage.k8s.io/v1alpha1 because it has no resources.
W1112 19:50:52.449779       1 genericapiserver.go:412] Skipping API apps/v1beta2 because it has no resources.
W1112 19:50:52.449806       1 genericapiserver.go:412] Skipping API apps/v1beta1 because it has no resources.
I1112 19:50:52.457387       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I1112 19:50:52.457410       1 plugins.go:161] Loaded 10 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
I1112 19:50:52.459321       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.459341       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:52.464560       1 client.go:360] parsed scheme: "endpoint"
I1112 19:50:52.464584       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1112 19:50:54.119744       1 dynamic_cafile_content.go:167] Starting request-header::/var/lib/minikube/certs/front-proxy-ca.crt
I1112 19:50:54.119909       1 dynamic_cafile_content.go:167] Starting client-ca-bundle::/var/lib/minikube/certs/ca.crt
I1112 19:50:54.120157       1 dynamic_serving_content.go:130] Starting serving-cert::/var/lib/minikube/certs/apiserver.crt::/var/lib/minikube/certs/apiserver.key
I1112 19:50:54.120318       1 secure_serving.go:197] Serving securely on [::]:8443
I1112 19:50:54.120466       1 tlsconfig.go:240] Starting DynamicServingCertificateController
I1112 19:50:54.121364       1 customresource_discovery_controller.go:209] Starting DiscoveryController
I1112 19:50:54.121762       1 controller.go:83] Starting OpenAPI AggregationController
I1112 19:50:54.121918       1 dynamic_serving_content.go:130] Starting aggregator-proxy-cert::/var/lib/minikube/certs/front-proxy-client.crt::/var/lib/minikube/certs/front-proxy-client.key
I1112 19:50:54.122017       1 apiservice_controller.go:97] Starting APIServiceRegistrationController
I1112 19:50:54.122062       1 cache.go:32] Waiting for caches to sync for APIServiceRegistrationController controller
I1112 19:50:54.122121       1 available_controller.go:404] Starting AvailableConditionController
I1112 19:50:54.122162       1 cache.go:32] Waiting for caches to sync for AvailableConditionController controller
I1112 19:50:54.122230       1 autoregister_controller.go:141] Starting autoregister controller
I1112 19:50:54.122273       1 cache.go:32] Waiting for caches to sync for autoregister controller
I1112 19:50:54.122734       1 cluster_authentication_trust_controller.go:440] Starting cluster_authentication_trust_controller controller
I1112 19:50:54.122785       1 shared_informer.go:240] Waiting for caches to sync for cluster_authentication_trust_controller
I1112 19:50:54.134928       1 controller.go:86] Starting OpenAPI controller
I1112 19:50:54.144395       1 naming_controller.go:291] Starting NamingConditionController
I1112 19:50:54.144406       1 establishing_controller.go:76] Starting EstablishingController
I1112 19:50:54.144411       1 nonstructuralschema_controller.go:186] Starting NonStructuralSchemaConditionController
I1112 19:50:54.144416       1 apiapproval_controller.go:186] Starting KubernetesAPIApprovalPolicyConformantConditionController
I1112 19:50:54.144423       1 crd_finalizer.go:266] Starting CRDFinalizer
I1112 19:50:54.144573       1 crdregistration_controller.go:111] Starting crd-autoregister controller
I1112 19:50:54.145067       1 shared_informer.go:240] Waiting for caches to sync for crd-autoregister
I1112 19:50:54.144591       1 dynamic_cafile_content.go:167] Starting client-ca-bundle::/var/lib/minikube/certs/ca.crt
I1112 19:50:54.144596       1 dynamic_cafile_content.go:167] Starting request-header::/var/lib/minikube/certs/front-proxy-ca.crt
E1112 19:50:54.203259       1 controller.go:152] Unable to remove old endpoints from kubernetes service: StorageError: key not found, Code: 1, Key: /registry/masterleases/192.168.39.244, ResourceVersion: 0, AdditionalErrorMsg: 
I1112 19:50:54.226416       1 cache.go:39] Caches are synced for APIServiceRegistrationController controller
I1112 19:50:54.226542       1 cache.go:39] Caches are synced for AvailableConditionController controller
I1112 19:50:54.226634       1 cache.go:39] Caches are synced for autoregister controller
I1112 19:50:54.226973       1 shared_informer.go:247] Caches are synced for cluster_authentication_trust_controller 
I1112 19:50:54.245139       1 shared_informer.go:247] Caches are synced for crd-autoregister 
I1112 19:50:55.119756       1 controller.go:132] OpenAPI AggregationController: action for item : Nothing (removed from the queue).
I1112 19:50:55.120110       1 controller.go:132] OpenAPI AggregationController: action for item k8s_internal_local_delegation_chain_0000000000: Nothing (removed from the queue).
I1112 19:50:55.130297       1 storage_scheduling.go:134] created PriorityClass system-node-critical with value 2000001000
I1112 19:50:55.179531       1 storage_scheduling.go:134] created PriorityClass system-cluster-critical with value 2000000000
I1112 19:50:55.179701       1 storage_scheduling.go:143] all system priority classes are created successfully or already exist.
I1112 19:50:55.434107       1 controller.go:606] quota admission added evaluator for: roles.rbac.authorization.k8s.io
I1112 19:50:55.455417       1 controller.go:606] quota admission added evaluator for: rolebindings.rbac.authorization.k8s.io
W1112 19:50:55.526705       1 lease.go:233] Resetting endpoints for master service "kubernetes" to [192.168.39.244]
I1112 19:50:55.527699       1 controller.go:606] quota admission added evaluator for: endpoints
I1112 19:50:55.533602       1 controller.go:606] quota admission added evaluator for: endpointslices.discovery.k8s.io
I1112 19:50:56.555155       1 controller.go:606] quota admission added evaluator for: serviceaccounts
I1112 19:50:57.173687       1 controller.go:606] quota admission added evaluator for: deployments.apps
I1112 19:50:57.336136       1 controller.go:606] quota admission added evaluator for: daemonsets.apps
I1112 19:51:03.449799       1 controller.go:606] quota admission added evaluator for: leases.coordination.k8s.io
I1112 19:51:03.554952       1 controller.go:606] quota admission added evaluator for: controllerrevisions.apps
I1112 19:51:03.756546       1 controller.go:606] quota admission added evaluator for: replicasets.apps
I1112 19:51:34.977114       1 client.go:360] parsed scheme: "passthrough"
I1112 19:51:34.977153       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 19:51:34.977178       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 19:52:06.733059       1 client.go:360] parsed scheme: "passthrough"
I1112 19:52:06.733099       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 19:52:06.733107       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 19:52:46.672113       1 client.go:360] parsed scheme: "passthrough"
I1112 19:52:46.672162       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 19:52:46.672172       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 19:53:26.586361       1 client.go:360] parsed scheme: "passthrough"
I1112 19:53:26.586400       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 19:53:26.586407       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 19:54:02.889372       1 client.go:360] parsed scheme: "passthrough"
I1112 19:54:02.889425       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 19:54:02.889437       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 19:54:39.608028       1 client.go:360] parsed scheme: "passthrough"
I1112 19:54:39.608066       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 19:54:39.608075       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 19:55:13.562039       1 client.go:360] parsed scheme: "passthrough"
I1112 19:55:13.562086       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 19:55:13.562102       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 19:55:57.632375       1 client.go:360] parsed scheme: "passthrough"
I1112 19:55:57.632417       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 19:55:57.632424       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 19:56:38.511003       1 client.go:360] parsed scheme: "passthrough"
I1112 19:56:38.511039       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 19:56:38.511049       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 19:57:23.076425       1 client.go:360] parsed scheme: "passthrough"
I1112 19:57:23.076635       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 19:57:23.076698       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 19:57:56.856646       1 client.go:360] parsed scheme: "passthrough"
I1112 19:57:56.856820       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 19:57:56.856914       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 19:58:36.358780       1 client.go:360] parsed scheme: "passthrough"
I1112 19:58:36.358837       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 19:58:36.358848       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 19:59:15.236624       1 client.go:360] parsed scheme: "passthrough"
I1112 19:59:15.236785       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 19:59:15.236841       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 19:59:48.375232       1 client.go:360] parsed scheme: "passthrough"
I1112 19:59:48.375275       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 19:59:48.375284       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:00:20.447496       1 client.go:360] parsed scheme: "passthrough"
I1112 20:00:20.447544       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:00:20.447555       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:01:02.918079       1 client.go:360] parsed scheme: "passthrough"
I1112 20:01:02.918122       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:01:02.918131       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:01:33.500452       1 client.go:360] parsed scheme: "passthrough"
I1112 20:01:33.500490       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:01:33.500499       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:02:17.582244       1 client.go:360] parsed scheme: "passthrough"
I1112 20:02:17.582318       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:02:17.582333       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:02:53.187062       1 client.go:360] parsed scheme: "passthrough"
I1112 20:02:53.187123       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:02:53.187258       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:03:27.275118       1 client.go:360] parsed scheme: "passthrough"
I1112 20:03:27.275316       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:03:27.275397       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:03:58.744197       1 client.go:360] parsed scheme: "passthrough"
I1112 20:03:58.744234       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:03:58.744261       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:04:34.267727       1 client.go:360] parsed scheme: "passthrough"
I1112 20:04:34.267875       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:04:34.267896       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:05:15.189417       1 client.go:360] parsed scheme: "passthrough"
I1112 20:05:15.189470       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:05:15.189478       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:05:47.465434       1 client.go:360] parsed scheme: "passthrough"
I1112 20:05:47.465463       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:05:47.465470       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:06:29.115837       1 client.go:360] parsed scheme: "passthrough"
I1112 20:06:29.115884       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:06:29.115894       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:07:07.666017       1 client.go:360] parsed scheme: "passthrough"
I1112 20:07:07.666215       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:07:07.666302       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:07:49.456830       1 client.go:360] parsed scheme: "passthrough"
I1112 20:07:49.456874       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:07:49.456881       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:08:31.456441       1 client.go:360] parsed scheme: "passthrough"
I1112 20:08:31.456485       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:08:31.456494       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:09:07.225584       1 client.go:360] parsed scheme: "passthrough"
I1112 20:09:07.225625       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:09:07.225633       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:09:44.712867       1 client.go:360] parsed scheme: "passthrough"
I1112 20:09:44.712893       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:09:44.712899       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:10:18.073715       1 client.go:360] parsed scheme: "passthrough"
I1112 20:10:18.073767       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:10:18.073779       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:10:52.159320       1 client.go:360] parsed scheme: "passthrough"
I1112 20:10:52.159372       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:10:52.159380       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:11:36.687854       1 client.go:360] parsed scheme: "passthrough"
I1112 20:11:36.687891       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:11:36.687899       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:12:13.112566       1 client.go:360] parsed scheme: "passthrough"
I1112 20:12:13.112619       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:12:13.112664       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:12:50.413754       1 client.go:360] parsed scheme: "passthrough"
I1112 20:12:50.413788       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:12:50.413796       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:13:27.844249       1 client.go:360] parsed scheme: "passthrough"
I1112 20:13:27.844303       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:13:27.844311       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:14:04.272401       1 client.go:360] parsed scheme: "passthrough"
I1112 20:14:04.272443       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:14:04.272451       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:14:42.616528       1 client.go:360] parsed scheme: "passthrough"
I1112 20:14:42.616593       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:14:42.616608       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:15:25.760209       1 client.go:360] parsed scheme: "passthrough"
I1112 20:15:25.760317       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:15:25.760366       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:16:04.889197       1 client.go:360] parsed scheme: "passthrough"
I1112 20:16:04.889331       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:16:04.889433       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:16:43.422568       1 client.go:360] parsed scheme: "passthrough"
I1112 20:16:43.422636       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:16:43.422647       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:17:14.907908       1 client.go:360] parsed scheme: "passthrough"
I1112 20:17:14.907945       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:17:14.907952       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:17:48.175524       1 client.go:360] parsed scheme: "passthrough"
I1112 20:17:48.175598       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:17:48.175636       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:18:22.503671       1 client.go:360] parsed scheme: "passthrough"
I1112 20:18:22.503708       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:18:22.503715       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:19:05.899051       1 client.go:360] parsed scheme: "passthrough"
I1112 20:19:05.899100       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:19:05.899108       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:19:40.083558       1 client.go:360] parsed scheme: "passthrough"
I1112 20:19:40.083597       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:19:40.083604       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:20:13.166332       1 client.go:360] parsed scheme: "passthrough"
I1112 20:20:13.166383       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:20:13.166395       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:20:52.569605       1 client.go:360] parsed scheme: "passthrough"
I1112 20:20:52.569678       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:20:52.569691       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:21:33.225463       1 client.go:360] parsed scheme: "passthrough"
I1112 20:21:33.225630       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:21:33.225689       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:22:16.102902       1 client.go:360] parsed scheme: "passthrough"
I1112 20:22:16.102940       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:22:16.102953       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:22:56.519135       1 client.go:360] parsed scheme: "passthrough"
I1112 20:22:56.519175       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:22:56.519182       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:23:29.599483       1 client.go:360] parsed scheme: "passthrough"
I1112 20:23:29.599547       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:23:29.599555       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:24:04.502407       1 client.go:360] parsed scheme: "passthrough"
I1112 20:24:04.502525       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:24:04.502644       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:24:40.098831       1 client.go:360] parsed scheme: "passthrough"
I1112 20:24:40.098919       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:24:40.098938       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:25:13.234632       1 client.go:360] parsed scheme: "passthrough"
I1112 20:25:13.234669       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:25:13.234677       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:25:53.776383       1 client.go:360] parsed scheme: "passthrough"
I1112 20:25:53.776473       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:25:53.776491       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:26:31.062459       1 client.go:360] parsed scheme: "passthrough"
I1112 20:26:31.062558       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:26:31.062620       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:27:07.840878       1 client.go:360] parsed scheme: "passthrough"
I1112 20:27:07.840941       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:27:07.840951       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:27:38.667459       1 client.go:360] parsed scheme: "passthrough"
I1112 20:27:38.667510       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:27:38.667522       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:28:16.266539       1 client.go:360] parsed scheme: "passthrough"
I1112 20:28:16.266585       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:28:16.266718       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:28:48.235303       1 client.go:360] parsed scheme: "passthrough"
I1112 20:28:48.235342       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:28:48.235348       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:29:25.518359       1 client.go:360] parsed scheme: "passthrough"
I1112 20:29:25.518396       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:29:25.518403       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:30:01.197445       1 client.go:360] parsed scheme: "passthrough"
I1112 20:30:01.197627       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:30:01.197743       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:30:39.595352       1 client.go:360] parsed scheme: "passthrough"
I1112 20:30:39.595435       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:30:39.595449       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:31:09.932424       1 client.go:360] parsed scheme: "passthrough"
I1112 20:31:09.932479       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:31:09.932490       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:31:50.525848       1 client.go:360] parsed scheme: "passthrough"
I1112 20:31:50.525882       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:31:50.525887       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1112 20:32:28.892176       1 client.go:360] parsed scheme: "passthrough"
I1112 20:32:28.892235       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1112 20:32:28.892245       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 03:56:27.074814       1 client.go:360] parsed scheme: "passthrough"
I1113 03:56:27.074863       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 03:56:27.074876       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 03:56:30.614421       1 trace.go:205] Trace[1699858310]: "GuaranteedUpdate etcd3" type:*coordination.Lease (13-Nov-2020 03:56:28.574) (total time: 2039ms):
Trace[1699858310]: ---"Transaction committed" 2039ms (03:56:00.614)
Trace[1699858310]: [2.039585968s] [2.039585968s] END
I1113 03:56:30.614627       1 trace.go:205] Trace[1763048548]: "Update" url:/apis/coordination.k8s.io/v1/namespaces/kube-node-lease/leases/minikube,user-agent:kubelet/v1.19.2 (linux/amd64) kubernetes/f574309,client:192.168.39.244 (13-Nov-2020 03:56:28.574) (total time: 2039ms):
Trace[1763048548]: ---"Object stored in database" 2039ms (03:56:00.614)
Trace[1763048548]: [2.039860655s] [2.039860655s] END
I1113 03:56:31.167703       1 trace.go:205] Trace[548029436]: "GuaranteedUpdate etcd3" type:*core.Node (13-Nov-2020 03:56:28.761) (total time: 2406ms):
Trace[548029436]: ---"Transaction committed" 2402ms (03:56:00.167)
Trace[548029436]: [2.406116941s] [2.406116941s] END
I1113 03:56:31.188132       1 trace.go:205] Trace[1066712755]: "Patch" url:/api/v1/nodes/minikube/status,user-agent:kubelet/v1.19.2 (linux/amd64) kubernetes/f574309,client:192.168.39.244 (13-Nov-2020 03:56:28.761) (total time: 2426ms):
Trace[1066712755]: ---"Object stored in database" 2402ms (03:56:00.167)
Trace[1066712755]: [2.426630308s] [2.426630308s] END
I1113 03:56:31.620640       1 trace.go:205] Trace[1885859995]: "Get" url:/api/v1/namespaces/kube-system/endpoints/k8s.io-minikube-hostpath,user-agent:storage-provisioner/v0.0.0 (linux/amd64) kubernetes/$Format,client:192.168.122.113 (13-Nov-2020 03:56:28.580) (total time: 3040ms):
Trace[1885859995]: ---"About to write a response" 3040ms (03:56:00.620)
Trace[1885859995]: [3.040167798s] [3.040167798s] END
I1113 03:56:47.860388       1 trace.go:205] Trace[1962271921]: "GuaranteedUpdate etcd3" type:*v1.Endpoints (13-Nov-2020 03:56:47.335) (total time: 524ms):
Trace[1962271921]: ---"Transaction prepared" 222ms (03:56:00.669)
Trace[1962271921]: ---"Transaction committed" 191ms (03:56:00.860)
Trace[1962271921]: [524.520379ms] [524.520379ms] END
I1113 03:57:10.263547       1 client.go:360] parsed scheme: "passthrough"
I1113 03:57:10.263769       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 03:57:10.263795       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 03:57:41.851921       1 client.go:360] parsed scheme: "passthrough"
I1113 03:57:41.851999       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 03:57:41.852010       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 03:58:12.481074       1 client.go:360] parsed scheme: "passthrough"
I1113 03:58:12.481261       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 03:58:12.481300       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 03:58:45.537728       1 client.go:360] parsed scheme: "passthrough"
I1113 03:58:45.537765       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 03:58:45.537788       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 03:59:29.670663       1 client.go:360] parsed scheme: "passthrough"
I1113 03:59:29.670848       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 03:59:29.670913       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:00:06.523846       1 client.go:360] parsed scheme: "passthrough"
I1113 04:00:06.524043       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:00:06.524056       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:00:39.305238       1 client.go:360] parsed scheme: "passthrough"
I1113 04:00:39.305382       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:00:39.305456       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:01:15.333544       1 client.go:360] parsed scheme: "passthrough"
I1113 04:01:15.333607       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:01:15.333766       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:01:56.224574       1 client.go:360] parsed scheme: "passthrough"
I1113 04:01:56.224677       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:01:56.224729       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:02:30.109922       1 client.go:360] parsed scheme: "passthrough"
I1113 04:02:30.110003       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:02:30.110013       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:03:13.961237       1 client.go:360] parsed scheme: "passthrough"
I1113 04:03:13.961276       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:03:13.961284       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:03:56.907153       1 client.go:360] parsed scheme: "passthrough"
I1113 04:03:56.907190       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:03:56.907199       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:04:34.315808       1 client.go:360] parsed scheme: "passthrough"
I1113 04:04:34.315922       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:04:34.315957       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:05:11.363557       1 client.go:360] parsed scheme: "passthrough"
I1113 04:05:11.363599       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:05:11.363608       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:05:49.193144       1 client.go:360] parsed scheme: "passthrough"
I1113 04:05:49.193203       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:05:49.193217       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:06:31.362046       1 client.go:360] parsed scheme: "passthrough"
I1113 04:06:31.362107       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:06:31.362123       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:07:10.534451       1 client.go:360] parsed scheme: "passthrough"
I1113 04:07:10.534496       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:07:10.534505       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:07:52.941241       1 client.go:360] parsed scheme: "passthrough"
I1113 04:07:52.941301       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:07:52.941313       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:08:27.071551       1 client.go:360] parsed scheme: "passthrough"
I1113 04:08:27.071651       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:08:27.071711       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:09:05.511078       1 client.go:360] parsed scheme: "passthrough"
I1113 04:09:05.511119       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:09:05.511129       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:09:37.690002       1 client.go:360] parsed scheme: "passthrough"
I1113 04:09:37.690053       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:09:37.690064       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:10:08.167231       1 client.go:360] parsed scheme: "passthrough"
I1113 04:10:08.167276       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:10:08.167417       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:10:40.767137       1 client.go:360] parsed scheme: "passthrough"
I1113 04:10:40.767332       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:10:40.767361       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:11:11.985463       1 client.go:360] parsed scheme: "passthrough"
I1113 04:11:11.985511       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:11:11.985518       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:11:51.685646       1 client.go:360] parsed scheme: "passthrough"
I1113 04:11:51.685921       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:11:51.686042       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:12:29.271098       1 client.go:360] parsed scheme: "passthrough"
I1113 04:12:29.271175       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:12:29.271191       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:13:01.447976       1 client.go:360] parsed scheme: "passthrough"
I1113 04:13:01.448045       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:13:01.448055       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:13:38.311604       1 client.go:360] parsed scheme: "passthrough"
I1113 04:13:38.311661       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:13:38.311673       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:14:19.689763       1 client.go:360] parsed scheme: "passthrough"
I1113 04:14:19.689843       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:14:19.689862       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:14:52.800190       1 client.go:360] parsed scheme: "passthrough"
I1113 04:14:52.800315       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:14:52.800417       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:15:32.715804       1 client.go:360] parsed scheme: "passthrough"
I1113 04:15:32.715897       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:15:32.715944       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:16:17.037919       1 client.go:360] parsed scheme: "passthrough"
I1113 04:16:17.038151       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:16:17.038225       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:16:51.556037       1 client.go:360] parsed scheme: "passthrough"
I1113 04:16:51.556083       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:16:51.556096       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:17:28.707327       1 client.go:360] parsed scheme: "passthrough"
I1113 04:17:28.707362       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:17:28.707370       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:17:59.348518       1 client.go:360] parsed scheme: "passthrough"
I1113 04:17:59.348543       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:17:59.348563       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:18:33.781292       1 client.go:360] parsed scheme: "passthrough"
I1113 04:18:33.781543       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:18:33.781648       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:19:07.784100       1 client.go:360] parsed scheme: "passthrough"
I1113 04:19:07.784216       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:19:07.784239       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:19:50.484350       1 client.go:360] parsed scheme: "passthrough"
I1113 04:19:50.484387       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:19:50.484394       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:20:26.232744       1 client.go:360] parsed scheme: "passthrough"
I1113 04:20:26.232779       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:20:26.232786       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:21:02.029365       1 client.go:360] parsed scheme: "passthrough"
I1113 04:21:02.029510       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:21:02.029576       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:21:33.195032       1 client.go:360] parsed scheme: "passthrough"
I1113 04:21:33.195164       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:21:33.195235       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:22:12.280452       1 client.go:360] parsed scheme: "passthrough"
I1113 04:22:12.280507       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:22:12.280519       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:22:50.585124       1 client.go:360] parsed scheme: "passthrough"
I1113 04:22:50.585186       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:22:50.585198       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:23:25.019187       1 client.go:360] parsed scheme: "passthrough"
I1113 04:23:25.019267       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:23:25.019465       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:24:06.455495       1 client.go:360] parsed scheme: "passthrough"
I1113 04:24:06.455540       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:24:06.455557       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:24:36.963090       1 client.go:360] parsed scheme: "passthrough"
I1113 04:24:36.963241       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:24:36.963350       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:25:15.706212       1 client.go:360] parsed scheme: "passthrough"
I1113 04:25:15.706266       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:25:15.706276       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:25:57.025156       1 client.go:360] parsed scheme: "passthrough"
I1113 04:25:57.025211       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:25:57.025222       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:26:39.128175       1 client.go:360] parsed scheme: "passthrough"
I1113 04:26:39.128221       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:26:39.128239       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:27:14.793816       1 client.go:360] parsed scheme: "passthrough"
I1113 04:27:14.794025       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:27:14.794044       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:27:45.518411       1 client.go:360] parsed scheme: "passthrough"
I1113 04:27:45.518459       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:27:45.518470       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:28:27.992807       1 client.go:360] parsed scheme: "passthrough"
I1113 04:28:27.992869       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:28:27.992887       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:29:01.357092       1 client.go:360] parsed scheme: "passthrough"
I1113 04:29:01.357147       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:29:01.357162       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:29:36.029691       1 client.go:360] parsed scheme: "passthrough"
I1113 04:29:36.029733       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:29:36.029742       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:30:11.105322       1 client.go:360] parsed scheme: "passthrough"
I1113 04:30:11.105376       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:30:11.105390       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:30:44.427287       1 client.go:360] parsed scheme: "passthrough"
I1113 04:30:44.427335       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:30:44.427343       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:31:23.465584       1 client.go:360] parsed scheme: "passthrough"
I1113 04:31:23.465621       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:31:23.465629       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:31:55.677100       1 client.go:360] parsed scheme: "passthrough"
I1113 04:31:55.677334       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:31:55.677411       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:32:27.221640       1 client.go:360] parsed scheme: "passthrough"
I1113 04:32:27.221761       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:32:27.221826       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:33:00.224365       1 client.go:360] parsed scheme: "passthrough"
I1113 04:33:00.224405       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:33:00.224414       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:33:41.105327       1 client.go:360] parsed scheme: "passthrough"
I1113 04:33:41.105387       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:33:41.105397       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:34:11.599030       1 client.go:360] parsed scheme: "passthrough"
I1113 04:34:11.599073       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:34:11.599084       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:34:46.909214       1 client.go:360] parsed scheme: "passthrough"
I1113 04:34:46.909271       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:34:46.909281       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:35:26.132707       1 client.go:360] parsed scheme: "passthrough"
I1113 04:35:26.132963       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:35:26.133084       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:35:57.425376       1 client.go:360] parsed scheme: "passthrough"
I1113 04:35:57.425434       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:35:57.425444       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:36:39.152016       1 client.go:360] parsed scheme: "passthrough"
I1113 04:36:39.152059       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:36:39.152081       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:37:23.136442       1 client.go:360] parsed scheme: "passthrough"
I1113 04:37:23.136478       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:37:23.136490       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:38:03.782090       1 client.go:360] parsed scheme: "passthrough"
I1113 04:38:03.782137       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:38:03.782147       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:38:44.845102       1 client.go:360] parsed scheme: "passthrough"
I1113 04:38:44.845376       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:38:44.845551       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:39:19.143828       1 client.go:360] parsed scheme: "passthrough"
I1113 04:39:19.143864       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:39:19.143872       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:39:56.253220       1 client.go:360] parsed scheme: "passthrough"
I1113 04:39:56.253503       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:39:56.253626       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:40:27.781841       1 client.go:360] parsed scheme: "passthrough"
I1113 04:40:27.781892       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:40:27.781901       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:41:06.570656       1 client.go:360] parsed scheme: "passthrough"
I1113 04:41:06.570715       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:41:06.570880       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:41:41.174520       1 client.go:360] parsed scheme: "passthrough"
I1113 04:41:41.174564       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:41:41.174574       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:42:12.298305       1 client.go:360] parsed scheme: "passthrough"
I1113 04:42:12.298508       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:42:12.298527       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:42:44.696470       1 client.go:360] parsed scheme: "passthrough"
I1113 04:42:44.696658       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:42:44.696743       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:43:20.092968       1 client.go:360] parsed scheme: "passthrough"
I1113 04:43:20.093102       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:43:20.093144       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:43:54.340716       1 client.go:360] parsed scheme: "passthrough"
I1113 04:43:54.340753       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:43:54.340761       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:44:30.006661       1 client.go:360] parsed scheme: "passthrough"
I1113 04:44:30.006720       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:44:30.006735       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:45:10.215096       1 client.go:360] parsed scheme: "passthrough"
I1113 04:45:10.215136       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:45:10.215143       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:45:51.004927       1 client.go:360] parsed scheme: "passthrough"
I1113 04:45:51.005012       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:45:51.005024       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:46:34.396537       1 client.go:360] parsed scheme: "passthrough"
I1113 04:46:34.396584       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:46:34.396597       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:47:14.361414       1 client.go:360] parsed scheme: "passthrough"
I1113 04:47:14.361600       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:47:14.361701       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:47:58.249134       1 client.go:360] parsed scheme: "passthrough"
I1113 04:47:58.249216       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:47:58.249239       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:48:41.370233       1 client.go:360] parsed scheme: "passthrough"
I1113 04:48:41.370286       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:48:41.370299       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:49:21.519443       1 client.go:360] parsed scheme: "passthrough"
I1113 04:49:21.519493       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:49:21.519508       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:50:05.048129       1 client.go:360] parsed scheme: "passthrough"
I1113 04:50:05.048214       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:50:05.048267       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:50:44.521085       1 client.go:360] parsed scheme: "passthrough"
I1113 04:50:44.521390       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:50:44.521489       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:51:22.728638       1 client.go:360] parsed scheme: "passthrough"
I1113 04:51:22.728684       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:51:22.729035       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:52:07.604391       1 client.go:360] parsed scheme: "passthrough"
I1113 04:52:07.604443       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:52:07.604456       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:52:40.950728       1 client.go:360] parsed scheme: "passthrough"
I1113 04:52:40.950772       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:52:40.950779       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:53:20.050178       1 client.go:360] parsed scheme: "passthrough"
I1113 04:53:20.050219       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:53:20.050230       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:53:58.772048       1 client.go:360] parsed scheme: "passthrough"
I1113 04:53:58.772107       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:53:58.772117       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:54:31.001138       1 client.go:360] parsed scheme: "passthrough"
I1113 04:54:31.001369       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:54:31.001457       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:55:11.420584       1 client.go:360] parsed scheme: "passthrough"
I1113 04:55:11.420643       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:55:11.420659       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:55:47.222226       1 client.go:360] parsed scheme: "passthrough"
I1113 04:55:47.222269       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:55:47.222282       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:56:17.673475       1 client.go:360] parsed scheme: "passthrough"
I1113 04:56:17.673550       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:56:17.673563       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:57:01.997346       1 client.go:360] parsed scheme: "passthrough"
I1113 04:57:01.997541       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:57:01.997576       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:57:41.398220       1 client.go:360] parsed scheme: "passthrough"
I1113 04:57:41.398347       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:57:41.398417       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:58:13.925937       1 client.go:360] parsed scheme: "passthrough"
I1113 04:58:13.926013       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:58:13.926033       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:58:45.729890       1 client.go:360] parsed scheme: "passthrough"
I1113 04:58:45.730135       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:58:45.730275       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:59:23.892378       1 client.go:360] parsed scheme: "passthrough"
I1113 04:59:23.892426       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:59:23.892462       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 04:59:54.415484       1 client.go:360] parsed scheme: "passthrough"
I1113 04:59:54.415525       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 04:59:54.415532       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:00:31.207174       1 client.go:360] parsed scheme: "passthrough"
I1113 05:00:31.207245       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:00:31.207257       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:01:10.142480       1 client.go:360] parsed scheme: "passthrough"
I1113 05:01:10.142525       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:01:10.142535       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:01:44.492660       1 client.go:360] parsed scheme: "passthrough"
I1113 05:01:44.492708       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:01:44.492716       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:02:20.704706       1 client.go:360] parsed scheme: "passthrough"
I1113 05:02:20.704732       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:02:20.704738       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:02:53.322137       1 client.go:360] parsed scheme: "passthrough"
I1113 05:02:53.322183       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:02:53.322194       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:03:24.415707       1 client.go:360] parsed scheme: "passthrough"
I1113 05:03:24.415752       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:03:24.415765       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:04:07.593072       1 client.go:360] parsed scheme: "passthrough"
I1113 05:04:07.593148       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:04:07.593165       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:04:50.423147       1 client.go:360] parsed scheme: "passthrough"
I1113 05:04:50.423196       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:04:50.423213       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:05:26.714598       1 client.go:360] parsed scheme: "passthrough"
I1113 05:05:26.714673       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:05:26.714688       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:06:03.047582       1 client.go:360] parsed scheme: "passthrough"
I1113 05:06:03.047636       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:06:03.047649       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:06:47.938747       1 client.go:360] parsed scheme: "passthrough"
I1113 05:06:47.938793       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:06:47.938803       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:07:24.606946       1 client.go:360] parsed scheme: "passthrough"
I1113 05:07:24.607022       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:07:24.607038       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:08:06.361433       1 client.go:360] parsed scheme: "passthrough"
I1113 05:08:06.361470       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:08:06.361498       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:08:40.511184       1 client.go:360] parsed scheme: "passthrough"
I1113 05:08:40.511245       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:08:40.511255       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:09:11.462757       1 client.go:360] parsed scheme: "passthrough"
I1113 05:09:11.462826       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:09:11.462840       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:09:47.668444       1 client.go:360] parsed scheme: "passthrough"
I1113 05:09:47.668486       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:09:47.668496       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:10:18.565432       1 client.go:360] parsed scheme: "passthrough"
I1113 05:10:18.565525       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:10:18.565553       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:10:51.135036       1 client.go:360] parsed scheme: "passthrough"
I1113 05:10:51.135091       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:10:51.135102       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:11:34.863108       1 client.go:360] parsed scheme: "passthrough"
I1113 05:11:34.863147       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:11:34.863157       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:12:18.245471       1 client.go:360] parsed scheme: "passthrough"
I1113 05:12:18.245686       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:12:18.245703       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:12:51.153970       1 client.go:360] parsed scheme: "passthrough"
I1113 05:12:51.154168       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:12:51.154238       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:13:21.429111       1 client.go:360] parsed scheme: "passthrough"
I1113 05:13:21.429158       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:13:21.429169       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:14:03.196565       1 client.go:360] parsed scheme: "passthrough"
I1113 05:14:03.196622       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:14:03.196631       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:14:37.044816       1 client.go:360] parsed scheme: "passthrough"
I1113 05:14:37.045019       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:14:37.045058       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:15:11.739591       1 client.go:360] parsed scheme: "passthrough"
I1113 05:15:11.739635       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:15:11.739645       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:15:51.334903       1 client.go:360] parsed scheme: "passthrough"
I1113 05:15:51.335126       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:15:51.335253       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:16:22.248069       1 client.go:360] parsed scheme: "passthrough"
I1113 05:16:22.248123       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:16:22.248143       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:17:04.666333       1 client.go:360] parsed scheme: "passthrough"
I1113 05:17:04.666399       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:17:04.666412       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:17:46.493838       1 client.go:360] parsed scheme: "passthrough"
I1113 05:17:46.493882       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:17:46.493890       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:18:20.185930       1 client.go:360] parsed scheme: "passthrough"
I1113 05:18:20.185972       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:18:20.185993       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:18:51.309367       1 client.go:360] parsed scheme: "passthrough"
I1113 05:18:51.309412       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:18:51.309420       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:19:23.907581       1 client.go:360] parsed scheme: "passthrough"
I1113 05:19:23.907623       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:19:23.907658       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:20:02.905464       1 client.go:360] parsed scheme: "passthrough"
I1113 05:20:02.905678       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:20:02.905768       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:20:36.776653       1 client.go:360] parsed scheme: "passthrough"
I1113 05:20:36.776713       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:20:36.776755       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:21:07.883577       1 client.go:360] parsed scheme: "passthrough"
I1113 05:21:07.883635       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:21:07.883675       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:21:40.866331       1 client.go:360] parsed scheme: "passthrough"
I1113 05:21:40.866546       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:21:40.866558       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:22:13.705466       1 client.go:360] parsed scheme: "passthrough"
I1113 05:22:13.705495       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:22:13.705502       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:22:53.234944       1 client.go:360] parsed scheme: "passthrough"
I1113 05:22:53.235212       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:22:53.235334       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:23:33.168379       1 client.go:360] parsed scheme: "passthrough"
I1113 05:23:33.168415       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:23:33.168443       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:24:10.641946       1 client.go:360] parsed scheme: "passthrough"
I1113 05:24:10.642036       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:24:10.642051       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:24:42.661304       1 client.go:360] parsed scheme: "passthrough"
I1113 05:24:42.661356       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:24:42.661364       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:25:25.532466       1 client.go:360] parsed scheme: "passthrough"
I1113 05:25:25.532531       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:25:25.532542       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:26:03.729530       1 client.go:360] parsed scheme: "passthrough"
I1113 05:26:03.729576       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:26:03.729587       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:26:34.577440       1 client.go:360] parsed scheme: "passthrough"
I1113 05:26:34.577492       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:26:34.577505       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:27:07.613904       1 client.go:360] parsed scheme: "passthrough"
I1113 05:27:07.613946       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:27:07.613954       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:27:38.543690       1 client.go:360] parsed scheme: "passthrough"
I1113 05:27:38.543749       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:27:38.543762       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:28:09.079960       1 client.go:360] parsed scheme: "passthrough"
I1113 05:28:09.080248       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:28:09.080312       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:28:41.219451       1 client.go:360] parsed scheme: "passthrough"
I1113 05:28:41.219571       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:28:41.219660       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:29:14.907482       1 client.go:360] parsed scheme: "passthrough"
I1113 05:29:14.907747       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:29:14.907853       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:29:52.937572       1 client.go:360] parsed scheme: "passthrough"
I1113 05:29:52.937616       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:29:52.937624       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:30:36.166475       1 client.go:360] parsed scheme: "passthrough"
I1113 05:30:36.166633       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:30:36.166734       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:31:19.546749       1 client.go:360] parsed scheme: "passthrough"
I1113 05:31:19.546792       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:31:19.546801       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:31:57.953589       1 client.go:360] parsed scheme: "passthrough"
I1113 05:31:57.953634       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:31:57.953643       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:32:42.924652       1 client.go:360] parsed scheme: "passthrough"
I1113 05:32:42.924709       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:32:42.924720       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:33:17.399342       1 client.go:360] parsed scheme: "passthrough"
I1113 05:33:17.399383       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:33:17.399391       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:33:56.401303       1 client.go:360] parsed scheme: "passthrough"
I1113 05:33:56.401344       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:33:56.401508       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:34:33.922689       1 client.go:360] parsed scheme: "passthrough"
I1113 05:34:33.922820       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:34:33.922834       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:35:15.730211       1 client.go:360] parsed scheme: "passthrough"
I1113 05:35:15.730346       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:35:15.730472       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:36:00.541777       1 client.go:360] parsed scheme: "passthrough"
I1113 05:36:00.541894       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:36:00.541963       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:36:45.029421       1 client.go:360] parsed scheme: "passthrough"
I1113 05:36:45.029660       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:36:45.029742       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:37:21.241754       1 client.go:360] parsed scheme: "passthrough"
I1113 05:37:21.241788       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:37:21.241799       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:38:00.788744       1 client.go:360] parsed scheme: "passthrough"
I1113 05:38:00.788803       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:38:00.789004       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:38:45.519113       1 client.go:360] parsed scheme: "passthrough"
I1113 05:38:45.519165       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:38:45.519177       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:39:26.166570       1 client.go:360] parsed scheme: "passthrough"
I1113 05:39:26.166811       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:39:26.166967       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:39:58.310406       1 client.go:360] parsed scheme: "passthrough"
I1113 05:39:58.310454       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:39:58.310465       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:40:31.490107       1 client.go:360] parsed scheme: "passthrough"
I1113 05:40:31.490146       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:40:31.490155       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:41:16.474514       1 client.go:360] parsed scheme: "passthrough"
I1113 05:41:16.474563       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:41:16.474574       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:41:51.227284       1 client.go:360] parsed scheme: "passthrough"
I1113 05:41:51.227415       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:41:51.227543       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:42:30.840233       1 client.go:360] parsed scheme: "passthrough"
I1113 05:42:30.840481       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:42:30.840503       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:43:11.683214       1 client.go:360] parsed scheme: "passthrough"
I1113 05:43:11.683255       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:43:11.683266       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:43:46.192951       1 client.go:360] parsed scheme: "passthrough"
I1113 05:43:46.193002       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:43:46.193012       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:44:17.581428       1 client.go:360] parsed scheme: "passthrough"
I1113 05:44:17.581488       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:44:17.581503       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:44:51.271136       1 client.go:360] parsed scheme: "passthrough"
I1113 05:44:51.271420       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:44:51.271519       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:45:35.121137       1 client.go:360] parsed scheme: "passthrough"
I1113 05:45:35.121192       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:45:35.121207       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:46:16.709694       1 client.go:360] parsed scheme: "passthrough"
I1113 05:46:16.709726       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:46:16.709836       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:46:54.689712       1 client.go:360] parsed scheme: "passthrough"
I1113 05:46:54.689825       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:46:54.689858       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:47:34.713105       1 client.go:360] parsed scheme: "passthrough"
I1113 05:47:34.713151       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:47:34.713166       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:48:14.382451       1 client.go:360] parsed scheme: "passthrough"
I1113 05:48:14.382511       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:48:14.382522       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:48:48.451329       1 client.go:360] parsed scheme: "passthrough"
I1113 05:48:48.451463       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:48:48.451501       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:49:32.453901       1 client.go:360] parsed scheme: "passthrough"
I1113 05:49:32.454005       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:49:32.454058       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:50:13.661241       1 client.go:360] parsed scheme: "passthrough"
I1113 05:50:13.661293       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:50:13.661303       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:50:51.568447       1 client.go:360] parsed scheme: "passthrough"
I1113 05:50:51.568507       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:50:51.568517       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:51:22.281182       1 client.go:360] parsed scheme: "passthrough"
I1113 05:51:22.281229       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:51:22.281239       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:52:06.539973       1 client.go:360] parsed scheme: "passthrough"
I1113 05:52:06.540034       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:52:06.540044       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:52:38.656596       1 client.go:360] parsed scheme: "passthrough"
I1113 05:52:38.656811       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:52:38.656838       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:53:10.401370       1 client.go:360] parsed scheme: "passthrough"
I1113 05:53:10.401410       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:53:10.401420       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:53:48.350054       1 client.go:360] parsed scheme: "passthrough"
I1113 05:53:48.350249       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:53:48.350320       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:54:30.627390       1 client.go:360] parsed scheme: "passthrough"
I1113 05:54:30.627429       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:54:30.627443       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:55:06.095815       1 client.go:360] parsed scheme: "passthrough"
I1113 05:55:06.095876       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:55:06.095886       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:55:37.351968       1 client.go:360] parsed scheme: "passthrough"
I1113 05:55:37.352128       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:55:37.352182       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:56:17.978881       1 client.go:360] parsed scheme: "passthrough"
I1113 05:56:17.978922       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:56:17.978944       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:57:01.169153       1 client.go:360] parsed scheme: "passthrough"
I1113 05:57:01.169198       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:57:01.169208       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:57:37.499246       1 client.go:360] parsed scheme: "passthrough"
I1113 05:57:37.499279       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:57:37.499287       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:58:16.950710       1 client.go:360] parsed scheme: "passthrough"
I1113 05:58:16.950903       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:58:16.950941       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:58:58.597474       1 client.go:360] parsed scheme: "passthrough"
I1113 05:58:58.597548       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:58:58.597566       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 05:59:36.904662       1 client.go:360] parsed scheme: "passthrough"
I1113 05:59:36.904749       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 05:59:36.904763       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:00:12.575967       1 client.go:360] parsed scheme: "passthrough"
I1113 06:00:12.576034       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:00:12.576043       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:00:50.310931       1 client.go:360] parsed scheme: "passthrough"
I1113 06:00:50.310967       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:00:50.311111       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:01:23.031942       1 client.go:360] parsed scheme: "passthrough"
I1113 06:01:23.032183       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:01:23.032204       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:01:53.621648       1 client.go:360] parsed scheme: "passthrough"
I1113 06:01:53.621832       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:01:53.621881       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:02:26.253352       1 client.go:360] parsed scheme: "passthrough"
I1113 06:02:26.253427       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:02:26.253443       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:02:57.666023       1 client.go:360] parsed scheme: "passthrough"
I1113 06:02:57.666064       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:02:57.666095       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:03:35.960237       1 client.go:360] parsed scheme: "passthrough"
I1113 06:03:35.960270       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:03:35.960279       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:04:20.218655       1 client.go:360] parsed scheme: "passthrough"
I1113 06:04:20.218772       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:04:20.218822       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:05:00.883725       1 client.go:360] parsed scheme: "passthrough"
I1113 06:05:00.883830       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:05:00.883894       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:05:32.712965       1 client.go:360] parsed scheme: "passthrough"
I1113 06:05:32.713029       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:05:32.713042       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:06:03.018133       1 client.go:360] parsed scheme: "passthrough"
I1113 06:06:03.018218       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:06:03.018357       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:06:33.918458       1 client.go:360] parsed scheme: "passthrough"
I1113 06:06:33.918600       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:06:33.918773       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:07:13.777114       1 client.go:360] parsed scheme: "passthrough"
I1113 06:07:13.777284       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:07:13.777318       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:07:58.743114       1 client.go:360] parsed scheme: "passthrough"
I1113 06:07:58.743334       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:07:58.743385       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:08:29.726584       1 client.go:360] parsed scheme: "passthrough"
I1113 06:08:29.726629       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:08:29.726680       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:09:09.406165       1 client.go:360] parsed scheme: "passthrough"
I1113 06:09:09.406271       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:09:09.406338       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:09:40.916810       1 client.go:360] parsed scheme: "passthrough"
I1113 06:09:40.916849       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:09:40.916859       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:10:17.848720       1 client.go:360] parsed scheme: "passthrough"
I1113 06:10:17.848764       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:10:17.848789       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:10:50.545150       1 client.go:360] parsed scheme: "passthrough"
I1113 06:10:50.545195       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:10:50.545203       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:11:33.099000       1 client.go:360] parsed scheme: "passthrough"
I1113 06:11:33.099043       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:11:33.099051       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:12:09.099588       1 client.go:360] parsed scheme: "passthrough"
I1113 06:12:09.099629       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:12:09.099638       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:12:48.589498       1 client.go:360] parsed scheme: "passthrough"
I1113 06:12:48.589740       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:12:48.589908       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:13:28.683917       1 client.go:360] parsed scheme: "passthrough"
I1113 06:13:28.683963       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:13:28.683973       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:13:59.795390       1 client.go:360] parsed scheme: "passthrough"
I1113 06:13:59.795438       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:13:59.795448       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:14:39.729613       1 client.go:360] parsed scheme: "passthrough"
I1113 06:14:39.729655       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:14:39.729665       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:15:16.326402       1 client.go:360] parsed scheme: "passthrough"
I1113 06:15:16.326490       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:15:16.326511       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:15:58.235583       1 client.go:360] parsed scheme: "passthrough"
I1113 06:15:58.235700       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:15:58.235787       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:16:36.817147       1 client.go:360] parsed scheme: "passthrough"
I1113 06:16:36.817201       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:16:36.817405       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:17:15.077854       1 client.go:360] parsed scheme: "passthrough"
I1113 06:17:15.077901       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:17:15.077911       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:17:49.038632       1 client.go:360] parsed scheme: "passthrough"
I1113 06:17:49.038680       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:17:49.038691       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:18:27.909009       1 client.go:360] parsed scheme: "passthrough"
I1113 06:18:27.909056       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:18:27.909066       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:19:11.627214       1 client.go:360] parsed scheme: "passthrough"
I1113 06:19:11.627327       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:19:11.627359       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:19:43.509336       1 client.go:360] parsed scheme: "passthrough"
I1113 06:19:43.509394       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:19:43.509404       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:20:24.661967       1 client.go:360] parsed scheme: "passthrough"
I1113 06:20:24.662125       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:20:24.662138       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:21:08.475628       1 client.go:360] parsed scheme: "passthrough"
I1113 06:21:08.475676       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:21:08.475687       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:21:46.407558       1 client.go:360] parsed scheme: "passthrough"
I1113 06:21:46.407734       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:21:46.407794       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:22:31.074583       1 client.go:360] parsed scheme: "passthrough"
I1113 06:22:31.074623       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:22:31.074646       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:23:05.790275       1 client.go:360] parsed scheme: "passthrough"
I1113 06:23:05.790332       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:23:05.790346       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:23:37.164799       1 client.go:360] parsed scheme: "passthrough"
I1113 06:23:37.164865       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:23:37.164879       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:24:17.736372       1 client.go:360] parsed scheme: "passthrough"
I1113 06:24:17.736411       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:24:17.736548       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:24:48.883661       1 client.go:360] parsed scheme: "passthrough"
I1113 06:24:48.883719       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:24:48.883729       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:25:28.217641       1 client.go:360] parsed scheme: "passthrough"
I1113 06:25:28.217679       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:25:28.217689       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:26:04.458593       1 client.go:360] parsed scheme: "passthrough"
I1113 06:26:04.458666       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:26:04.458685       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:26:42.069647       1 client.go:360] parsed scheme: "passthrough"
I1113 06:26:42.069690       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:26:42.069699       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:27:12.596749       1 client.go:360] parsed scheme: "passthrough"
I1113 06:27:12.596857       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:27:12.596908       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:27:55.970297       1 client.go:360] parsed scheme: "passthrough"
I1113 06:27:55.970339       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:27:55.970348       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:28:40.734874       1 client.go:360] parsed scheme: "passthrough"
I1113 06:28:40.734933       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:28:40.734943       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:29:13.185034       1 client.go:360] parsed scheme: "passthrough"
I1113 06:29:13.185086       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:29:13.185105       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:29:45.017604       1 client.go:360] parsed scheme: "passthrough"
I1113 06:29:45.017779       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:29:45.017906       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:30:28.230772       1 client.go:360] parsed scheme: "passthrough"
I1113 06:30:28.230817       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:30:28.230826       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:31:11.710238       1 client.go:360] parsed scheme: "passthrough"
I1113 06:31:11.710278       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:31:11.710388       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:31:45.367144       1 client.go:360] parsed scheme: "passthrough"
I1113 06:31:45.367208       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:31:45.367217       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:32:22.876026       1 client.go:360] parsed scheme: "passthrough"
I1113 06:32:22.876201       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:32:22.876219       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:32:54.013415       1 client.go:360] parsed scheme: "passthrough"
I1113 06:32:54.013459       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:32:54.013474       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:33:28.443032       1 client.go:360] parsed scheme: "passthrough"
I1113 06:33:28.443086       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:33:28.443099       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:34:09.138681       1 client.go:360] parsed scheme: "passthrough"
I1113 06:34:09.138737       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:34:09.138750       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:34:50.062708       1 client.go:360] parsed scheme: "passthrough"
I1113 06:34:50.062755       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:34:50.062787       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:35:34.953929       1 client.go:360] parsed scheme: "passthrough"
I1113 06:35:34.953960       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:35:34.953967       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:36:17.410925       1 client.go:360] parsed scheme: "passthrough"
I1113 06:36:17.410975       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:36:17.411019       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:36:55.474835       1 client.go:360] parsed scheme: "passthrough"
I1113 06:36:55.474870       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:36:55.474877       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:37:27.863733       1 client.go:360] parsed scheme: "passthrough"
I1113 06:37:27.863773       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:37:27.863783       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:38:04.503079       1 client.go:360] parsed scheme: "passthrough"
I1113 06:38:04.503114       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:38:04.503123       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:38:45.316111       1 client.go:360] parsed scheme: "passthrough"
I1113 06:38:45.316331       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:38:45.316438       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:39:18.610076       1 client.go:360] parsed scheme: "passthrough"
I1113 06:39:18.610113       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:39:18.610122       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:39:54.253423       1 client.go:360] parsed scheme: "passthrough"
I1113 06:39:54.253488       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:39:54.253497       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:40:32.722597       1 client.go:360] parsed scheme: "passthrough"
I1113 06:40:32.722638       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:40:32.722644       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:41:08.572326       1 client.go:360] parsed scheme: "passthrough"
I1113 06:41:08.572366       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:41:08.572377       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:41:44.389312       1 client.go:360] parsed scheme: "passthrough"
I1113 06:41:44.389477       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:41:44.389601       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:42:26.711901       1 client.go:360] parsed scheme: "passthrough"
I1113 06:42:26.711965       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:42:26.711974       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:43:08.257133       1 client.go:360] parsed scheme: "passthrough"
I1113 06:43:08.257188       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:43:08.257202       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:43:50.414426       1 client.go:360] parsed scheme: "passthrough"
I1113 06:43:50.414496       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:43:50.414508       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:44:27.890191       1 client.go:360] parsed scheme: "passthrough"
I1113 06:44:27.890287       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:44:27.890347       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:45:07.107476       1 client.go:360] parsed scheme: "passthrough"
I1113 06:45:07.107698       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:45:07.107718       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:45:44.904190       1 client.go:360] parsed scheme: "passthrough"
I1113 06:45:44.904234       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:45:44.904244       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:46:28.083882       1 client.go:360] parsed scheme: "passthrough"
I1113 06:46:28.083928       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:46:28.083956       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:47:08.214090       1 client.go:360] parsed scheme: "passthrough"
I1113 06:47:08.214140       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:47:08.214151       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:47:50.771389       1 client.go:360] parsed scheme: "passthrough"
I1113 06:47:50.771456       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:47:50.771473       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:48:24.435556       1 client.go:360] parsed scheme: "passthrough"
I1113 06:48:24.435631       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:48:24.435647       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:49:06.678958       1 client.go:360] parsed scheme: "passthrough"
I1113 06:49:06.679027       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:49:06.679040       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:49:43.997206       1 client.go:360] parsed scheme: "passthrough"
I1113 06:49:43.997243       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:49:43.997254       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:50:23.029483       1 client.go:360] parsed scheme: "passthrough"
I1113 06:50:23.029662       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:50:23.029786       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:51:03.825645       1 client.go:360] parsed scheme: "passthrough"
I1113 06:51:03.825950       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:51:03.826031       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:51:44.820674       1 client.go:360] parsed scheme: "passthrough"
I1113 06:51:44.820718       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:51:44.820729       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:52:26.465606       1 client.go:360] parsed scheme: "passthrough"
I1113 06:52:26.465677       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:52:26.465690       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:53:03.195604       1 client.go:360] parsed scheme: "passthrough"
I1113 06:53:03.195785       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:53:03.195947       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:53:44.602356       1 client.go:360] parsed scheme: "passthrough"
I1113 06:53:44.602399       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:53:44.602410       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:54:17.036553       1 client.go:360] parsed scheme: "passthrough"
I1113 06:54:17.036667       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:54:17.036760       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:54:47.620860       1 client.go:360] parsed scheme: "passthrough"
I1113 06:54:47.620941       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:54:47.620953       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:55:22.214255       1 client.go:360] parsed scheme: "passthrough"
I1113 06:55:22.214307       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:55:22.214322       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:55:52.639530       1 client.go:360] parsed scheme: "passthrough"
I1113 06:55:52.639624       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:55:52.639690       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:56:37.293893       1 client.go:360] parsed scheme: "passthrough"
I1113 06:56:37.294058       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:56:37.294078       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:57:17.311284       1 client.go:360] parsed scheme: "passthrough"
I1113 06:57:17.311458       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:57:17.311551       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:57:53.524699       1 client.go:360] parsed scheme: "passthrough"
I1113 06:57:53.524739       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:57:53.524749       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:58:30.283133       1 client.go:360] parsed scheme: "passthrough"
I1113 06:58:30.283184       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:58:30.283195       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:59:10.707906       1 client.go:360] parsed scheme: "passthrough"
I1113 06:59:10.707956       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:59:10.707964       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 06:59:46.177970       1 client.go:360] parsed scheme: "passthrough"
I1113 06:59:46.178034       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 06:59:46.178178       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:00:24.479681       1 client.go:360] parsed scheme: "passthrough"
I1113 07:00:24.479722       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:00:24.479732       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:01:07.849532       1 client.go:360] parsed scheme: "passthrough"
I1113 07:01:07.849571       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:01:07.849581       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:01:46.019456       1 client.go:360] parsed scheme: "passthrough"
I1113 07:01:46.019498       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:01:46.019509       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:02:19.589081       1 client.go:360] parsed scheme: "passthrough"
I1113 07:02:19.589125       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:02:19.589135       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:02:54.763666       1 client.go:360] parsed scheme: "passthrough"
I1113 07:02:54.763888       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:02:54.763923       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:03:30.804203       1 client.go:360] parsed scheme: "passthrough"
I1113 07:03:30.804416       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:03:30.804530       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:04:07.608945       1 client.go:360] parsed scheme: "passthrough"
I1113 07:04:07.609017       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:04:07.609038       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:04:45.188374       1 client.go:360] parsed scheme: "passthrough"
I1113 07:04:45.188425       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:04:45.188577       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:05:17.867226       1 client.go:360] parsed scheme: "passthrough"
I1113 07:05:17.867386       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:05:17.867414       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:05:50.088536       1 client.go:360] parsed scheme: "passthrough"
I1113 07:05:50.088574       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:05:50.088600       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:06:31.922123       1 client.go:360] parsed scheme: "passthrough"
I1113 07:06:31.922177       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:06:31.922190       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:07:04.003739       1 client.go:360] parsed scheme: "passthrough"
I1113 07:07:04.003904       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:07:04.003970       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:07:47.014534       1 client.go:360] parsed scheme: "passthrough"
I1113 07:07:47.014776       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:07:47.014914       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:08:26.517453       1 client.go:360] parsed scheme: "passthrough"
I1113 07:08:26.517509       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:08:26.517523       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:09:01.889382       1 client.go:360] parsed scheme: "passthrough"
I1113 07:09:01.889569       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:09:01.889655       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:09:35.629496       1 client.go:360] parsed scheme: "passthrough"
I1113 07:09:35.629621       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:09:35.629686       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:10:13.954711       1 client.go:360] parsed scheme: "passthrough"
I1113 07:10:13.954789       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:10:13.954803       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:10:54.840924       1 client.go:360] parsed scheme: "passthrough"
I1113 07:10:54.840969       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:10:54.841136       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:11:39.584283       1 client.go:360] parsed scheme: "passthrough"
I1113 07:11:39.584333       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:11:39.584343       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:12:18.090717       1 client.go:360] parsed scheme: "passthrough"
I1113 07:12:18.090767       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:12:18.090799       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:12:53.626937       1 client.go:360] parsed scheme: "passthrough"
I1113 07:12:53.627020       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:12:53.627033       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:13:33.188601       1 client.go:360] parsed scheme: "passthrough"
I1113 07:13:33.188639       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:13:33.188648       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:14:15.860472       1 client.go:360] parsed scheme: "passthrough"
I1113 07:14:15.860519       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:14:15.860528       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:14:52.080129       1 client.go:360] parsed scheme: "passthrough"
I1113 07:14:52.080174       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:14:52.080185       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:15:35.576751       1 client.go:360] parsed scheme: "passthrough"
I1113 07:15:35.577037       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:15:35.577070       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:16:12.590640       1 client.go:360] parsed scheme: "passthrough"
I1113 07:16:12.590680       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:16:12.590689       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:16:54.235730       1 client.go:360] parsed scheme: "passthrough"
I1113 07:16:54.235765       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:16:54.235772       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:17:31.141714       1 client.go:360] parsed scheme: "passthrough"
I1113 07:17:31.141805       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:17:31.141826       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:18:10.627327       1 client.go:360] parsed scheme: "passthrough"
I1113 07:18:10.627520       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:18:10.627558       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:18:49.050366       1 client.go:360] parsed scheme: "passthrough"
I1113 07:18:49.050485       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:18:49.050538       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:19:30.771630       1 client.go:360] parsed scheme: "passthrough"
I1113 07:19:30.771829       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:19:30.771890       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:20:05.207179       1 client.go:360] parsed scheme: "passthrough"
I1113 07:20:05.207378       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:20:05.207430       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:20:47.984674       1 client.go:360] parsed scheme: "passthrough"
I1113 07:20:47.984721       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:20:47.984759       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:21:22.779345       1 client.go:360] parsed scheme: "passthrough"
I1113 07:21:22.779568       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:21:22.779666       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:22:02.398378       1 client.go:360] parsed scheme: "passthrough"
I1113 07:22:02.398492       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:22:02.398525       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:22:46.530766       1 client.go:360] parsed scheme: "passthrough"
I1113 07:22:46.530906       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:22:46.530941       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:23:28.215570       1 client.go:360] parsed scheme: "passthrough"
I1113 07:23:28.215607       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:23:28.215615       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:24:05.913676       1 client.go:360] parsed scheme: "passthrough"
I1113 07:24:05.913858       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:24:05.913952       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:24:45.171932       1 client.go:360] parsed scheme: "passthrough"
I1113 07:24:45.171999       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:24:45.172012       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:25:16.894813       1 client.go:360] parsed scheme: "passthrough"
I1113 07:25:16.894869       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:25:16.894879       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:25:57.374602       1 client.go:360] parsed scheme: "passthrough"
I1113 07:25:57.374788       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:25:57.374839       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:26:28.201910       1 client.go:360] parsed scheme: "passthrough"
I1113 07:26:28.201995       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:26:28.202009       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:27:09.141880       1 client.go:360] parsed scheme: "passthrough"
I1113 07:27:09.142079       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:27:09.142116       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:27:46.429501       1 client.go:360] parsed scheme: "passthrough"
I1113 07:27:46.429673       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:27:46.429794       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:28:16.841837       1 client.go:360] parsed scheme: "passthrough"
I1113 07:28:16.842075       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:28:16.842099       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:28:52.159262       1 client.go:360] parsed scheme: "passthrough"
I1113 07:28:52.159358       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:28:52.159401       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:29:26.154477       1 client.go:360] parsed scheme: "passthrough"
I1113 07:29:26.154541       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:29:26.154554       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:29:58.087541       1 client.go:360] parsed scheme: "passthrough"
I1113 07:29:58.087596       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:29:58.087604       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:30:31.691386       1 client.go:360] parsed scheme: "passthrough"
I1113 07:30:31.691426       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:30:31.691452       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:31:13.771425       1 client.go:360] parsed scheme: "passthrough"
I1113 07:31:13.771482       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:31:13.771499       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:31:58.362763       1 client.go:360] parsed scheme: "passthrough"
I1113 07:31:58.362893       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:31:58.363009       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:32:38.736199       1 client.go:360] parsed scheme: "passthrough"
I1113 07:32:38.736365       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:32:38.736476       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:32:58.240581       1 trace.go:205] Trace[80513177]: "GuaranteedUpdate etcd3" type:*v1.Endpoints (13-Nov-2020 07:32:57.273) (total time: 967ms):
Trace[80513177]: ---"Transaction committed" 965ms (07:32:00.240)
Trace[80513177]: [967.503145ms] [967.503145ms] END
I1113 07:33:15.739830       1 client.go:360] parsed scheme: "passthrough"
I1113 07:33:15.740029       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:33:15.740097       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:33:39.186529       1 trace.go:205] Trace[1726271717]: "Get" url:/api/v1/namespaces/kube-system/endpoints/k8s.io-minikube-hostpath,user-agent:storage-provisioner/v0.0.0 (linux/amd64) kubernetes/$Format,client:192.168.122.113 (13-Nov-2020 07:33:38.448) (total time: 737ms):
Trace[1726271717]: ---"About to write a response" 737ms (07:33:00.186)
Trace[1726271717]: [737.643282ms] [737.643282ms] END
I1113 07:33:51.332589       1 client.go:360] parsed scheme: "passthrough"
I1113 07:33:51.332833       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:33:51.332949       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:34:22.188377       1 client.go:360] parsed scheme: "passthrough"
I1113 07:34:22.188466       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:34:22.188500       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:35:06.194407       1 client.go:360] parsed scheme: "passthrough"
I1113 07:35:06.194605       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:35:06.194680       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:35:46.798876       1 client.go:360] parsed scheme: "passthrough"
I1113 07:35:46.798918       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:35:46.798927       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:35:49.337727       1 trace.go:205] Trace[585630835]: "GuaranteedUpdate etcd3" type:*v1.Endpoints (13-Nov-2020 07:35:47.283) (total time: 2054ms):
Trace[585630835]: ---"Transaction committed" 2047ms (07:35:00.337)
Trace[585630835]: [2.054669494s] [2.054669494s] END
I1113 07:35:49.338780       1 trace.go:205] Trace[2106152276]: "Get" url:/api/v1/namespaces/kube-system/endpoints/k8s.io-minikube-hostpath,user-agent:storage-provisioner/v0.0.0 (linux/amd64) kubernetes/$Format,client:192.168.122.113 (13-Nov-2020 07:35:48.137) (total time: 1201ms):
Trace[2106152276]: ---"About to write a response" 1201ms (07:35:00.338)
Trace[2106152276]: [1.201294965s] [1.201294965s] END
I1113 07:35:49.346262       1 trace.go:205] Trace[211010225]: "GuaranteedUpdate etcd3" type:*coordination.Lease (13-Nov-2020 07:35:48.333) (total time: 1012ms):
Trace[211010225]: ---"Transaction committed" 1011ms (07:35:00.346)
Trace[211010225]: [1.012508429s] [1.012508429s] END
I1113 07:35:49.346423       1 trace.go:205] Trace[233540599]: "Update" url:/apis/coordination.k8s.io/v1/namespaces/kube-node-lease/leases/minikube,user-agent:kubelet/v1.19.2 (linux/amd64) kubernetes/f574309,client:192.168.39.244 (13-Nov-2020 07:35:48.333) (total time: 1012ms):
Trace[233540599]: ---"Object stored in database" 1012ms (07:35:00.346)
Trace[233540599]: [1.012970514s] [1.012970514s] END
I1113 07:36:21.321707       1 client.go:360] parsed scheme: "passthrough"
I1113 07:36:21.321755       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:36:21.321770       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:36:30.774616       1 trace.go:205] Trace[340380622]: "Get" url:/api/v1/namespaces/kube-system/endpoints/k8s.io-minikube-hostpath,user-agent:storage-provisioner/v0.0.0 (linux/amd64) kubernetes/$Format,client:192.168.122.113 (13-Nov-2020 07:36:29.553) (total time: 1220ms):
Trace[340380622]: ---"About to write a response" 1220ms (07:36:00.774)
Trace[340380622]: [1.220677544s] [1.220677544s] END
I1113 07:37:03.947538       1 client.go:360] parsed scheme: "passthrough"
I1113 07:37:03.947584       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:37:03.947595       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:37:38.090467       1 trace.go:205] Trace[1151566132]: "Get" url:/api/v1/namespaces/default,user-agent:kube-apiserver/v1.19.2 (linux/amd64) kubernetes/f574309,client:127.0.0.1 (13-Nov-2020 07:37:37.269) (total time: 821ms):
Trace[1151566132]: ---"About to write a response" 821ms (07:37:00.090)
Trace[1151566132]: [821.349242ms] [821.349242ms] END
I1113 07:37:40.934876       1 client.go:360] parsed scheme: "passthrough"
I1113 07:37:40.934916       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:37:40.934925       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:38:24.300561       1 client.go:360] parsed scheme: "passthrough"
I1113 07:38:24.300606       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:38:24.300621       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:38:29.137218       1 trace.go:205] Trace[170672209]: "GuaranteedUpdate etcd3" type:*v1.Endpoints (13-Nov-2020 07:38:27.281) (total time: 1856ms):
Trace[170672209]: ---"Transaction committed" 1854ms (07:38:00.137)
Trace[170672209]: [1.856033437s] [1.856033437s] END
I1113 07:38:29.138496       1 trace.go:205] Trace[1933134841]: "Get" url:/api/v1/namespaces/kube-system/endpoints/k8s.io-minikube-hostpath,user-agent:storage-provisioner/v0.0.0 (linux/amd64) kubernetes/$Format,client:192.168.122.113 (13-Nov-2020 07:38:27.413) (total time: 1724ms):
Trace[1933134841]: ---"About to write a response" 1724ms (07:38:00.138)
Trace[1933134841]: [1.724632994s] [1.724632994s] END
I1113 07:38:49.043501       1 trace.go:205] Trace[1928973900]: "Get" url:/api/v1/namespaces/default,user-agent:kube-apiserver/v1.19.2 (linux/amd64) kubernetes/f574309,client:127.0.0.1 (13-Nov-2020 07:38:47.270) (total time: 1773ms):
Trace[1928973900]: ---"About to write a response" 1773ms (07:38:00.043)
Trace[1928973900]: [1.773273924s] [1.773273924s] END
I1113 07:39:06.717684       1 client.go:360] parsed scheme: "passthrough"
I1113 07:39:06.717877       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:39:06.718012       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:39:31.007433       1 trace.go:205] Trace[1051950290]: "GuaranteedUpdate etcd3" type:*coordination.Lease (13-Nov-2020 07:39:29.453) (total time: 1553ms):
Trace[1051950290]: ---"Transaction committed" 1552ms (07:39:00.007)
Trace[1051950290]: [1.553716398s] [1.553716398s] END
I1113 07:39:31.007587       1 trace.go:205] Trace[2124168640]: "Update" url:/apis/coordination.k8s.io/v1/namespaces/kube-node-lease/leases/minikube,user-agent:kubelet/v1.19.2 (linux/amd64) kubernetes/f574309,client:192.168.39.244 (13-Nov-2020 07:39:29.453) (total time: 1554ms):
Trace[2124168640]: ---"Object stored in database" 1553ms (07:39:00.007)
Trace[2124168640]: [1.554116055s] [1.554116055s] END
I1113 07:39:51.367025       1 client.go:360] parsed scheme: "passthrough"
I1113 07:39:51.367080       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:39:51.367096       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:40:27.781839       1 client.go:360] parsed scheme: "passthrough"
I1113 07:40:27.782008       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:40:27.782113       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:40:32.178514       1 trace.go:205] Trace[1324412604]: "GuaranteedUpdate etcd3" type:*coordination.Lease (13-Nov-2020 07:40:31.040) (total time: 1138ms):
Trace[1324412604]: ---"Transaction committed" 1137ms (07:40:00.178)
Trace[1324412604]: [1.138263797s] [1.138263797s] END
I1113 07:40:32.178632       1 trace.go:205] Trace[1565447752]: "Update" url:/apis/coordination.k8s.io/v1/namespaces/kube-node-lease/leases/minikube,user-agent:kubelet/v1.19.2 (linux/amd64) kubernetes/f574309,client:192.168.39.244 (13-Nov-2020 07:40:31.039) (total time: 1138ms):
Trace[1565447752]: ---"Object stored in database" 1138ms (07:40:00.178)
Trace[1565447752]: [1.138824792s] [1.138824792s] END
I1113 07:40:32.179999       1 trace.go:205] Trace[716268133]: "Get" url:/api/v1/namespaces/kube-system/endpoints/k8s.io-minikube-hostpath,user-agent:storage-provisioner/v0.0.0 (linux/amd64) kubernetes/$Format,client:192.168.122.113 (13-Nov-2020 07:40:29.735) (total time: 2444ms):
Trace[716268133]: ---"About to write a response" 2444ms (07:40:00.179)
Trace[716268133]: [2.444871716s] [2.444871716s] END
I1113 07:40:32.199906       1 trace.go:205] Trace[1300323740]: "Create" url:/api/v1/namespaces/kube-system/events,user-agent:kubelet/v1.19.2 (linux/amd64) kubernetes/f574309,client:192.168.39.244 (13-Nov-2020 07:40:30.703) (total time: 1496ms):
Trace[1300323740]: ---"Object stored in database" 1496ms (07:40:00.199)
Trace[1300323740]: [1.496279144s] [1.496279144s] END
I1113 07:40:56.578862       1 trace.go:205] Trace[714678872]: "List etcd3" key:/jobs,resourceVersion:,resourceVersionMatch:,limit:500,continue: (13-Nov-2020 07:40:54.598) (total time: 1980ms):
Trace[714678872]: [1.980614254s] [1.980614254s] END
I1113 07:40:56.579101       1 trace.go:205] Trace[1636383234]: "List" url:/apis/batch/v1/jobs,user-agent:kube-controller-manager/v1.19.2 (linux/amd64) kubernetes/f574309/system:serviceaccount:kube-system:cronjob-controller,client:192.168.39.244 (13-Nov-2020 07:40:54.598) (total time: 1980ms):
Trace[1636383234]: ---"Listing from storage done" 1980ms (07:40:00.578)
Trace[1636383234]: [1.980915301s] [1.980915301s] END
I1113 07:41:01.227388       1 client.go:360] parsed scheme: "passthrough"
I1113 07:41:01.227433       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:41:01.227443       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:41:35.552914       1 trace.go:205] Trace[623024525]: "GuaranteedUpdate etcd3" type:*core.Event (13-Nov-2020 07:41:34.705) (total time: 847ms):
Trace[623024525]: ---"Transaction prepared" 844ms (07:41:00.549)
Trace[623024525]: [847.700157ms] [847.700157ms] END
I1113 07:41:35.553039       1 trace.go:205] Trace[39394375]: "Patch" url:/api/v1/namespaces/kube-system/events/kube-apiserver-minikube.1647014eee67f708,user-agent:kubelet/v1.19.2 (linux/amd64) kubernetes/f574309,client:192.168.39.244 (13-Nov-2020 07:41:34.705) (total time: 847ms):
Trace[39394375]: ---"Object stored in database" 847ms (07:41:00.552)
Trace[39394375]: [847.959164ms] [847.959164ms] END
I1113 07:41:35.554437       1 trace.go:205] Trace[718355340]: "Get" url:/api/v1/namespaces/kube-system/endpoints/k8s.io-minikube-hostpath,user-agent:storage-provisioner/v0.0.0 (linux/amd64) kubernetes/$Format,client:192.168.122.113 (13-Nov-2020 07:41:32.745) (total time: 2808ms):
Trace[718355340]: ---"About to write a response" 2808ms (07:41:00.554)
Trace[718355340]: [2.808452438s] [2.808452438s] END
I1113 07:41:39.186429       1 client.go:360] parsed scheme: "passthrough"
I1113 07:41:39.186469       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:41:39.186477       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:41:52.967497       1 trace.go:205] Trace[1045105021]: "GuaranteedUpdate etcd3" type:*coordination.Lease (13-Nov-2020 07:41:52.226) (total time: 741ms):
Trace[1045105021]: ---"Transaction committed" 740ms (07:41:00.967)
Trace[1045105021]: [741.240274ms] [741.240274ms] END
I1113 07:41:52.967662       1 trace.go:205] Trace[474669781]: "Update" url:/apis/coordination.k8s.io/v1/namespaces/kube-node-lease/leases/minikube,user-agent:kubelet/v1.19.2 (linux/amd64) kubernetes/f574309,client:192.168.39.244 (13-Nov-2020 07:41:52.226) (total time: 741ms):
Trace[474669781]: ---"Object stored in database" 741ms (07:41:00.967)
Trace[474669781]: [741.535439ms] [741.535439ms] END
I1113 07:42:11.908526       1 trace.go:205] Trace[1432624641]: "GuaranteedUpdate etcd3" type:*core.Event (13-Nov-2020 07:42:10.703) (total time: 1205ms):
Trace[1432624641]: ---"Transaction committed" 1204ms (07:42:00.908)
Trace[1432624641]: [1.205091598s] [1.205091598s] END
I1113 07:42:11.908615       1 trace.go:205] Trace[566202637]: "Patch" url:/api/v1/namespaces/kube-system/events/kube-apiserver-minikube.1647014eee67f708,user-agent:kubelet/v1.19.2 (linux/amd64) kubernetes/f574309,client:192.168.39.244 (13-Nov-2020 07:42:10.703) (total time: 1205ms):
Trace[566202637]: ---"Object stored in database" 1204ms (07:42:00.908)
Trace[566202637]: [1.205386282s] [1.205386282s] END
I1113 07:42:11.910783       1 trace.go:205] Trace[428731858]: "Get" url:/api/v1/namespaces/kube-system/endpoints/k8s.io-minikube-hostpath,user-agent:storage-provisioner/v0.0.0 (linux/amd64) kubernetes/$Format,client:192.168.122.113 (13-Nov-2020 07:42:09.985) (total time: 1925ms):
Trace[428731858]: ---"About to write a response" 1924ms (07:42:00.910)
Trace[428731858]: [1.925033326s] [1.925033326s] END
I1113 07:42:13.242596       1 client.go:360] parsed scheme: "passthrough"
I1113 07:42:13.242722       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:42:13.242789       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:42:54.282951       1 client.go:360] parsed scheme: "passthrough"
I1113 07:42:54.283180       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:42:54.283251       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1113 07:43:31.047134       1 client.go:360] parsed scheme: "passthrough"
I1113 07:43:31.047187       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1113 07:43:31.047198       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
==== END logs for container kube-apiserver of pod kube-system/kube-apiserver-minikube ====
==== START logs for container kube-controller-manager of pod kube-system/kube-controller-manager-minikube ====
Flag --port has been deprecated, see --secure-port instead.
I1112 19:50:50.482243       1 serving.go:331] Generated self-signed cert in-memory
I1112 19:50:50.793244       1 controllermanager.go:175] Version: v1.19.2
I1112 19:50:50.794097       1 secure_serving.go:197] Serving securely on 127.0.0.1:10257
I1112 19:50:50.794176       1 dynamic_cafile_content.go:167] Starting request-header::/var/lib/minikube/certs/front-proxy-ca.crt
I1112 19:50:50.794292       1 dynamic_cafile_content.go:167] Starting client-ca-bundle::/var/lib/minikube/certs/ca.crt
I1112 19:50:50.794395       1 tlsconfig.go:240] Starting DynamicServingCertificateController
I1112 19:50:56.549516       1 shared_informer.go:240] Waiting for caches to sync for tokens
I1112 19:50:56.649660       1 shared_informer.go:247] Caches are synced for tokens 
I1112 19:50:56.661287       1 controllermanager.go:549] Started "endpointslice"
I1112 19:50:56.661432       1 endpointslice_controller.go:237] Starting endpoint slice controller
I1112 19:50:56.661474       1 shared_informer.go:240] Waiting for caches to sync for endpoint_slice
I1112 19:50:56.702545       1 controllermanager.go:549] Started "podgc"
I1112 19:50:56.702639       1 gc_controller.go:89] Starting GC controller
I1112 19:50:56.702702       1 shared_informer.go:240] Waiting for caches to sync for GC
I1112 19:50:56.716947       1 controllermanager.go:549] Started "tokencleaner"
I1112 19:50:56.717210       1 tokencleaner.go:118] Starting token cleaner controller
I1112 19:50:56.717247       1 shared_informer.go:240] Waiting for caches to sync for token_cleaner
I1112 19:50:56.717289       1 shared_informer.go:247] Caches are synced for token_cleaner 
E1112 19:50:56.728639       1 core.go:90] Failed to start service controller: WARNING: no cloud provider provided, services of type LoadBalancer will fail
W1112 19:50:56.728653       1 controllermanager.go:541] Skipping "service"
I1112 19:50:56.742131       1 controllermanager.go:549] Started "pv-protection"
I1112 19:50:56.742323       1 pv_protection_controller.go:83] Starting PV protection controller
I1112 19:50:56.742357       1 shared_informer.go:240] Waiting for caches to sync for PV protection
I1112 19:50:56.754709       1 controllermanager.go:549] Started "pvc-protection"
W1112 19:50:56.754855       1 controllermanager.go:541] Skipping "nodeipam"
I1112 19:50:56.755031       1 pvc_protection_controller.go:110] Starting PVC protection controller
I1112 19:50:56.755056       1 shared_informer.go:240] Waiting for caches to sync for PVC protection
I1112 19:50:56.802026       1 controllermanager.go:549] Started "persistentvolume-expander"
I1112 19:50:56.802106       1 expand_controller.go:319] Starting expand controller
I1112 19:50:56.802206       1 shared_informer.go:240] Waiting for caches to sync for expand
I1112 19:50:57.052148       1 controllermanager.go:549] Started "deployment"
W1112 19:50:57.052161       1 controllermanager.go:541] Skipping "root-ca-cert-publisher"
I1112 19:50:57.052677       1 deployment_controller.go:153] Starting deployment controller
I1112 19:50:57.052682       1 shared_informer.go:240] Waiting for caches to sync for deployment
I1112 19:50:57.301621       1 controllermanager.go:549] Started "endpoint"
I1112 19:50:57.301667       1 endpoints_controller.go:184] Starting endpoint controller
I1112 19:50:57.301671       1 shared_informer.go:240] Waiting for caches to sync for endpoint
I1112 19:50:57.550865       1 controllermanager.go:549] Started "replicationcontroller"
I1112 19:50:57.550902       1 replica_set.go:182] Starting replicationcontroller controller
I1112 19:50:57.550906       1 shared_informer.go:240] Waiting for caches to sync for ReplicationController
I1112 19:50:57.800774       1 controllermanager.go:549] Started "serviceaccount"
I1112 19:50:57.800815       1 serviceaccounts_controller.go:117] Starting service account controller
I1112 19:50:57.800819       1 shared_informer.go:240] Waiting for caches to sync for service account
I1112 19:50:58.051627       1 controllermanager.go:549] Started "job"
I1112 19:50:58.051805       1 job_controller.go:148] Starting job controller
I1112 19:50:58.051815       1 shared_informer.go:240] Waiting for caches to sync for job
I1112 19:50:58.301437       1 controllermanager.go:549] Started "csrapproving"
I1112 19:50:58.301595       1 certificate_controller.go:118] Starting certificate controller "csrapproving"
I1112 19:50:58.301606       1 shared_informer.go:240] Waiting for caches to sync for certificate-csrapproving
I1112 19:50:58.451693       1 cleaner.go:83] Starting CSR cleaner controller
I1112 19:50:58.451895       1 controllermanager.go:549] Started "csrcleaner"
I1112 19:50:58.701897       1 controllermanager.go:549] Started "ttl"
I1112 19:50:58.701976       1 ttl_controller.go:118] Starting TTL controller
I1112 19:50:58.701999       1 shared_informer.go:240] Waiting for caches to sync for TTL
I1112 19:50:59.303594       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for ingresses.extensions
I1112 19:50:59.303648       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for statefulsets.apps
I1112 19:50:59.303790       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for events.events.k8s.io
I1112 19:50:59.303859       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for rolebindings.rbac.authorization.k8s.io
I1112 19:50:59.303884       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for leases.coordination.k8s.io
I1112 19:50:59.304001       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for endpoints
W1112 19:50:59.304019       1 shared_informer.go:494] resyncPeriod 60958067837720 is smaller than resyncCheckPeriod 74954854785583 and the informer has already started. Changing it to 74954854785583
I1112 19:50:59.304174       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for serviceaccounts
I1112 19:50:59.304293       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for replicasets.apps
I1112 19:50:59.304320       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for horizontalpodautoscalers.autoscaling
I1112 19:50:59.304455       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for ingresses.networking.k8s.io
I1112 19:50:59.304533       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for limitranges
I1112 19:50:59.304653       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for networkpolicies.networking.k8s.io
I1112 19:50:59.304759       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for poddisruptionbudgets.policy
I1112 19:50:59.304777       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for controllerrevisions.apps
I1112 19:50:59.304911       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for roles.rbac.authorization.k8s.io
I1112 19:50:59.304932       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for endpointslices.discovery.k8s.io
I1112 19:50:59.305027       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for cronjobs.batch
I1112 19:50:59.305114       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for daemonsets.apps
I1112 19:50:59.305151       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for jobs.batch
I1112 19:50:59.305223       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for podtemplates
I1112 19:50:59.306287       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for deployments.apps
I1112 19:50:59.306408       1 controllermanager.go:549] Started "resourcequota"
I1112 19:50:59.307426       1 resource_quota_controller.go:272] Starting resource quota controller
I1112 19:50:59.307450       1 shared_informer.go:240] Waiting for caches to sync for resource quota
I1112 19:50:59.307471       1 resource_quota_monitor.go:303] QuotaMonitor running
I1112 19:50:59.355961       1 garbagecollector.go:128] Starting garbage collector controller
I1112 19:50:59.355974       1 shared_informer.go:240] Waiting for caches to sync for garbage collector
I1112 19:50:59.355996       1 graph_builder.go:282] GraphBuilder running
I1112 19:50:59.356186       1 controllermanager.go:549] Started "garbagecollector"
I1112 19:50:59.751197       1 controllermanager.go:549] Started "disruption"
I1112 19:50:59.751262       1 disruption.go:331] Starting disruption controller
I1112 19:50:59.751320       1 shared_informer.go:240] Waiting for caches to sync for disruption
I1112 19:51:00.001701       1 controllermanager.go:549] Started "bootstrapsigner"
I1112 19:51:00.001727       1 core.go:240] Will not configure cloud provider routes for allocate-node-cidrs: false, configure-cloud-routes: true.
W1112 19:51:00.001733       1 controllermanager.go:541] Skipping "route"
I1112 19:51:00.001904       1 shared_informer.go:240] Waiting for caches to sync for bootstrap_signer
I1112 19:51:00.251030       1 node_lifecycle_controller.go:77] Sending events to api server
E1112 19:51:00.251072       1 core.go:230] failed to start cloud node lifecycle controller: no cloud provider provided
W1112 19:51:00.251229       1 controllermanager.go:541] Skipping "cloud-node-lifecycle"
I1112 19:51:00.452591       1 request.go:645] Throttling request took 1.049210687s, request: GET:https://192.168.39.244:8443/apis/autoscaling/v1?timeout=32s
I1112 19:51:00.502480       1 controllermanager.go:549] Started "attachdetach"
W1112 19:51:00.502837       1 controllermanager.go:541] Skipping "ttl-after-finished"
I1112 19:51:00.502793       1 attach_detach_controller.go:322] Starting attach detach controller
I1112 19:51:00.503065       1 shared_informer.go:240] Waiting for caches to sync for attach detach
I1112 19:51:00.752614       1 controllermanager.go:549] Started "endpointslicemirroring"
I1112 19:51:00.752806       1 endpointslicemirroring_controller.go:211] Starting EndpointSliceMirroring controller
I1112 19:51:00.753190       1 shared_informer.go:240] Waiting for caches to sync for endpoint_slice_mirroring
I1112 19:51:01.012536       1 controllermanager.go:549] Started "namespace"
I1112 19:51:01.012707       1 namespace_controller.go:200] Starting namespace controller
I1112 19:51:01.012780       1 shared_informer.go:240] Waiting for caches to sync for namespace
I1112 19:51:01.251532       1 controllermanager.go:549] Started "daemonset"
I1112 19:51:01.251573       1 daemon_controller.go:285] Starting daemon sets controller
I1112 19:51:01.251581       1 shared_informer.go:240] Waiting for caches to sync for daemon sets
I1112 19:51:01.501642       1 controllermanager.go:549] Started "cronjob"
I1112 19:51:01.501777       1 cronjob_controller.go:96] Starting CronJob Manager
I1112 19:51:01.652612       1 controllermanager.go:549] Started "csrsigning"
I1112 19:51:01.652682       1 certificate_controller.go:118] Starting certificate controller "csrsigning-legacy-unknown"
I1112 19:51:01.652690       1 shared_informer.go:240] Waiting for caches to sync for certificate-csrsigning-legacy-unknown
I1112 19:51:01.652730       1 certificate_controller.go:118] Starting certificate controller "csrsigning-kubelet-serving"
I1112 19:51:01.652734       1 shared_informer.go:240] Waiting for caches to sync for certificate-csrsigning-kubelet-serving
I1112 19:51:01.652748       1 certificate_controller.go:118] Starting certificate controller "csrsigning-kubelet-client"
I1112 19:51:01.652752       1 shared_informer.go:240] Waiting for caches to sync for certificate-csrsigning-kubelet-client
I1112 19:51:01.652764       1 certificate_controller.go:118] Starting certificate controller "csrsigning-kube-apiserver-client"
I1112 19:51:01.652768       1 shared_informer.go:240] Waiting for caches to sync for certificate-csrsigning-kube-apiserver-client
I1112 19:51:01.652809       1 dynamic_serving_content.go:130] Starting csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key
I1112 19:51:01.652823       1 dynamic_serving_content.go:130] Starting csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key
I1112 19:51:01.652837       1 dynamic_serving_content.go:130] Starting csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key
I1112 19:51:01.652850       1 dynamic_serving_content.go:130] Starting csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key
I1112 19:51:01.901894       1 controllermanager.go:549] Started "persistentvolume-binder"
I1112 19:51:01.902025       1 pv_controller_base.go:303] Starting persistent volume controller
I1112 19:51:01.902144       1 shared_informer.go:240] Waiting for caches to sync for persistent volume
I1112 19:51:02.152237       1 controllermanager.go:549] Started "replicaset"
I1112 19:51:02.152340       1 replica_set.go:182] Starting replicaset controller
I1112 19:51:02.152350       1 shared_informer.go:240] Waiting for caches to sync for ReplicaSet
I1112 19:51:02.852018       1 controllermanager.go:549] Started "horizontalpodautoscaling"
I1112 19:51:02.852200       1 horizontal.go:169] Starting HPA controller
I1112 19:51:02.852213       1 shared_informer.go:240] Waiting for caches to sync for HPA
I1112 19:51:03.101905       1 controllermanager.go:549] Started "statefulset"
I1112 19:51:03.102004       1 stateful_set.go:146] Starting stateful set controller
I1112 19:51:03.102015       1 shared_informer.go:240] Waiting for caches to sync for stateful set
I1112 19:51:03.251562       1 node_lifecycle_controller.go:380] Sending events to api server.
I1112 19:51:03.253784       1 taint_manager.go:163] Sending events to api server.
I1112 19:51:03.253951       1 node_lifecycle_controller.go:508] Controller will reconcile labels.
I1112 19:51:03.254070       1 controllermanager.go:549] Started "nodelifecycle"
I1112 19:51:03.254155       1 node_lifecycle_controller.go:542] Starting node controller
I1112 19:51:03.254166       1 shared_informer.go:240] Waiting for caches to sync for taint
I1112 19:51:03.501590       1 controllermanager.go:549] Started "clusterrole-aggregation"
W1112 19:51:03.501610       1 controllermanager.go:541] Skipping "ephemeral-volume"
I1112 19:51:03.501948       1 clusterroleaggregation_controller.go:149] Starting ClusterRoleAggregator
I1112 19:51:03.501957       1 shared_informer.go:240] Waiting for caches to sync for ClusterRoleAggregator
I1112 19:51:03.511052       1 shared_informer.go:240] Waiting for caches to sync for resource quota
W1112 19:51:03.522904       1 actual_state_of_world.go:506] Failed to update statusUpdateNeeded field in actual state of world: Failed to set statusUpdateNeeded to needed true, because nodeName="minikube" does not exist
I1112 19:51:03.542436       1 shared_informer.go:247] Caches are synced for PV protection 
I1112 19:51:03.551002       1 shared_informer.go:247] Caches are synced for ReplicationController 
I1112 19:51:03.551679       1 shared_informer.go:247] Caches are synced for daemon sets 
I1112 19:51:03.552304       1 shared_informer.go:247] Caches are synced for HPA 
I1112 19:51:03.552755       1 shared_informer.go:247] Caches are synced for certificate-csrsigning-kubelet-serving 
I1112 19:51:03.552763       1 shared_informer.go:247] Caches are synced for certificate-csrsigning-legacy-unknown 
I1112 19:51:03.552771       1 shared_informer.go:247] Caches are synced for certificate-csrsigning-kubelet-client 
I1112 19:51:03.552778       1 shared_informer.go:247] Caches are synced for certificate-csrsigning-kube-apiserver-client 
I1112 19:51:03.553524       1 shared_informer.go:247] Caches are synced for endpoint_slice_mirroring 
I1112 19:51:03.555156       1 shared_informer.go:247] Caches are synced for PVC protection 
I1112 19:51:03.555172       1 shared_informer.go:247] Caches are synced for taint 
I1112 19:51:03.555202       1 node_lifecycle_controller.go:1429] Initializing eviction metric for zone: 
W1112 19:51:03.555235       1 node_lifecycle_controller.go:1044] Missing timestamp for Node minikube. Assuming now as a timestamp.
I1112 19:51:03.555255       1 node_lifecycle_controller.go:1245] Controller detected that zone  is now in state Normal.
I1112 19:51:03.555394       1 taint_manager.go:187] Starting NoExecuteTaintManager
I1112 19:51:03.555399       1 event.go:291] "Event occurred" object="minikube" kind="Node" apiVersion="v1" type="Normal" reason="RegisteredNode" message="Node minikube event: Registered Node minikube in Controller"
I1112 19:51:03.561524       1 shared_informer.go:247] Caches are synced for endpoint_slice 
I1112 19:51:03.564478       1 event.go:291] "Event occurred" object="kube-system/kube-proxy" kind="DaemonSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: kube-proxy-np9wk"
I1112 19:51:03.600894       1 shared_informer.go:247] Caches are synced for service account 
I1112 19:51:03.602326       1 shared_informer.go:247] Caches are synced for expand 
I1112 19:51:03.602352       1 shared_informer.go:247] Caches are synced for certificate-csrapproving 
I1112 19:51:03.602360       1 shared_informer.go:247] Caches are synced for endpoint 
I1112 19:51:03.602381       1 shared_informer.go:247] Caches are synced for TTL 
I1112 19:51:03.603237       1 shared_informer.go:247] Caches are synced for attach detach 
I1112 19:51:03.609175       1 shared_informer.go:247] Caches are synced for GC 
I1112 19:51:03.609349       1 shared_informer.go:247] Caches are synced for ClusterRoleAggregator 
I1112 19:51:03.609629       1 shared_informer.go:247] Caches are synced for stateful set 
I1112 19:51:03.609640       1 shared_informer.go:247] Caches are synced for bootstrap_signer 
I1112 19:51:03.609812       1 shared_informer.go:247] Caches are synced for persistent volume 
I1112 19:51:03.612906       1 shared_informer.go:247] Caches are synced for namespace 
I1112 19:51:03.751421       1 shared_informer.go:247] Caches are synced for disruption 
I1112 19:51:03.751441       1 disruption.go:339] Sending events to api server.
I1112 19:51:03.751926       1 shared_informer.go:247] Caches are synced for job 
I1112 19:51:03.753074       1 shared_informer.go:247] Caches are synced for ReplicaSet 
I1112 19:51:03.753174       1 shared_informer.go:247] Caches are synced for deployment 
I1112 19:51:03.759420       1 event.go:291] "Event occurred" object="kube-system/coredns" kind="Deployment" apiVersion="apps/v1" type="Normal" reason="ScalingReplicaSet" message="Scaled up replica set coredns-f9fd979d6 to 1"
I1112 19:51:03.765168       1 event.go:291] "Event occurred" object="kube-system/coredns-f9fd979d6" kind="ReplicaSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: coredns-f9fd979d6-28hnd"
I1112 19:51:03.807536       1 shared_informer.go:247] Caches are synced for resource quota 
I1112 19:51:03.811521       1 shared_informer.go:247] Caches are synced for resource quota 
I1112 19:51:03.869421       1 shared_informer.go:240] Waiting for caches to sync for garbage collector
I1112 19:51:04.156113       1 shared_informer.go:247] Caches are synced for garbage collector 
I1112 19:51:04.156150       1 garbagecollector.go:137] Garbage collector: all resource monitors have synced. Proceeding to collect garbage
I1112 19:51:04.169548       1 shared_informer.go:247] Caches are synced for garbage collector 
E1113 03:56:27.062580       1 resource_quota_controller.go:408] failed to discover resources: Get "https://192.168.39.244:8443/api?timeout=32s": dial tcp 192.168.39.244:8443: connect: network is unreachable
E1113 03:56:27.076591       1 node_lifecycle_controller.go:1138] Error updating node minikube: Put "https://192.168.39.244:8443/api/v1/nodes/minikube/status": dial tcp 192.168.39.244:8443: connect: network is unreachable
E1113 03:56:27.076689       1 node_lifecycle_controller.go:804] Failed while getting a Node to retry updating node health. Probably Node minikube was deleted.
E1113 03:56:27.076696       1 node_lifecycle_controller.go:809] Update health of Node '' from Controller error: Get "https://192.168.39.244:8443/api/v1/nodes/minikube": dial tcp 192.168.39.244:8443: connect: network is unreachable. Skipping - no pods will be evicted.
W1113 03:56:27.078835       1 garbagecollector.go:644] failed to discover preferred resources: Get "https://192.168.39.244:8443/api?timeout=32s": dial tcp 192.168.39.244:8443: connect: network is unreachable
E1113 03:56:27.087638       1 cronjob_controller.go:124] Failed to extract job list: Get "https://192.168.39.244:8443/apis/batch/v1/jobs?limit=500": dial tcp 192.168.39.244:8443: connect: network is unreachable
I1113 03:56:32.077031       1 node_lifecycle_controller.go:1429] Initializing eviction metric for zone: 
I1113 03:56:32.077141       1 node_lifecycle_controller.go:1245] Controller detected that zone  is now in state Normal.
==== END logs for container kube-controller-manager of pod kube-system/kube-controller-manager-minikube ====
==== START logs for container kube-proxy of pod kube-system/kube-proxy-np9wk ====
I1112 19:51:05.066927       1 node.go:136] Successfully retrieved node IP: 192.168.39.244
I1112 19:51:05.067031       1 server_others.go:111] kube-proxy node IP is an IPv4 address (192.168.39.244), assume IPv4 operation
W1112 19:51:05.093941       1 server_others.go:579] Unknown proxy mode "", assuming iptables proxy
I1112 19:51:05.094002       1 server_others.go:186] Using iptables Proxier.
W1112 19:51:05.094008       1 server_others.go:456] detect-local-mode set to ClusterCIDR, but no cluster CIDR defined
I1112 19:51:05.094010       1 server_others.go:467] detect-local-mode: ClusterCIDR , defaulting to no-op detect-local
I1112 19:51:05.094136       1 server.go:650] Version: v1.19.2
I1112 19:51:05.094348       1 conntrack.go:100] Set sysctl 'net/netfilter/nf_conntrack_max' to 131072
I1112 19:51:05.094358       1 conntrack.go:52] Setting nf_conntrack_max to 131072
I1112 19:51:05.094496       1 conntrack.go:83] Setting conntrack hashsize to 32768
I1112 19:51:05.097136       1 conntrack.go:100] Set sysctl 'net/netfilter/nf_conntrack_tcp_timeout_established' to 86400
I1112 19:51:05.097177       1 conntrack.go:100] Set sysctl 'net/netfilter/nf_conntrack_tcp_timeout_close_wait' to 3600
I1112 19:51:05.097418       1 config.go:315] Starting service config controller
I1112 19:51:05.097439       1 shared_informer.go:240] Waiting for caches to sync for service config
I1112 19:51:05.097459       1 config.go:224] Starting endpoint slice config controller
I1112 19:51:05.097468       1 shared_informer.go:240] Waiting for caches to sync for endpoint slice config
I1112 19:51:05.197631       1 shared_informer.go:247] Caches are synced for endpoint slice config 
I1112 19:51:05.197777       1 shared_informer.go:247] Caches are synced for service config 
==== END logs for container kube-proxy of pod kube-system/kube-proxy-np9wk ====
==== START logs for container kube-scheduler of pod kube-system/kube-scheduler-minikube ====
I1112 19:50:50.464104       1 registry.go:173] Registering SelectorSpread plugin
I1112 19:50:50.464137       1 registry.go:173] Registering SelectorSpread plugin
I1112 19:50:50.711937       1 serving.go:331] Generated self-signed cert in-memory
W1112 19:50:54.157231       1 requestheader_controller.go:193] Unable to get configmap/extension-apiserver-authentication in kube-system.  Usually fixed by 'kubectl create rolebinding -n kube-system ROLEBINDING_NAME --role=extension-apiserver-authentication-reader --serviceaccount=YOUR_NS:YOUR_SA'
W1112 19:50:54.157245       1 authentication.go:294] Error looking up in-cluster authentication configuration: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot get resource "configmaps" in API group "" in the namespace "kube-system"
W1112 19:50:54.157250       1 authentication.go:295] Continuing without authentication configuration. This may treat all requests as anonymous.
W1112 19:50:54.157254       1 authentication.go:296] To require authentication configuration lookup to succeed, set --authentication-tolerate-lookup-failure=false
I1112 19:50:54.195366       1 registry.go:173] Registering SelectorSpread plugin
I1112 19:50:54.195378       1 registry.go:173] Registering SelectorSpread plugin
I1112 19:50:54.197213       1 secure_serving.go:197] Serving securely on 127.0.0.1:10259
I1112 19:50:54.197540       1 configmap_cafile_content.go:202] Starting client-ca::kube-system::extension-apiserver-authentication::client-ca-file
I1112 19:50:54.197548       1 shared_informer.go:240] Waiting for caches to sync for client-ca::kube-system::extension-apiserver-authentication::client-ca-file
I1112 19:50:54.197612       1 tlsconfig.go:240] Starting DynamicServingCertificateController
E1112 19:50:54.198276       1 reflector.go:127] k8s.io/kubernetes/cmd/kube-scheduler/app/server.go:188: Failed to watch *v1.Pod: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E1112 19:50:54.198392       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StorageClass: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
E1112 19:50:54.198756       1 reflector.go:127] k8s.io/apiserver/pkg/server/dynamiccertificates/configmap_cafile_content.go:206: Failed to watch *v1.ConfigMap: failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
E1112 19:50:54.199926       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Pod: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E1112 19:50:54.200000       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicationController: failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
E1112 19:50:54.200100       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Service: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
E1112 19:50:54.200164       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicaSet: failed to list *v1.ReplicaSet: replicasets.apps is forbidden: User "system:kube-scheduler" cannot list resource "replicasets" in API group "apps" at the cluster scope
E1112 19:50:54.200277       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Node: failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
E1112 19:50:54.200430       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolume: failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
E1112 19:50:54.200945       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1beta1.PodDisruptionBudget: failed to list *v1beta1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
E1112 19:50:54.201117       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StatefulSet: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
E1112 19:50:54.201365       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.CSINode: failed to list *v1.CSINode: csinodes.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csinodes" in API group "storage.k8s.io" at the cluster scope
E1112 19:50:54.202144       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolumeClaim: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
E1112 19:50:55.056564       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StatefulSet: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
E1112 19:50:55.108631       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Service: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
E1112 19:50:55.137946       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolumeClaim: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
E1112 19:50:55.152960       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Node: failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
E1112 19:50:55.211814       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicationController: failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
E1112 19:50:55.340220       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Pod: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
I1112 19:50:55.797635       1 shared_informer.go:247] Caches are synced for client-ca::kube-system::extension-apiserver-authentication::client-ca-file 
==== END logs for container kube-scheduler of pod kube-system/kube-scheduler-minikube ====
==== START logs for container storage-provisioner of pod kube-system/storage-provisioner ====
I1112 19:51:19.764960       1 leaderelection.go:242] attempting to acquire leader lease  kube-system/k8s.io-minikube-hostpath...
I1112 19:51:19.770138       1 leaderelection.go:252] successfully acquired lease kube-system/k8s.io-minikube-hostpath
I1112 19:51:19.772399       1 controller.go:799] Starting provisioner controller k8s.io/minikube-hostpath_minikube_62ff9891-92d0-4898-bbd0-50383065f2f7!
I1112 19:51:19.772432       1 event.go:281] Event(v1.ObjectReference{Kind:"Endpoints", Namespace:"kube-system", Name:"k8s.io-minikube-hostpath", UID:"0b6e86c6-7cb0-4447-968a-c72242dfba3a", APIVersion:"v1", ResourceVersion:"404", FieldPath:""}): type: 'Normal' reason: 'LeaderElection' minikube_62ff9891-92d0-4898-bbd0-50383065f2f7 became leader
I1112 19:51:19.872499       1 controller.go:848] Started provisioner controller k8s.io/minikube-hostpath_minikube_62ff9891-92d0-4898-bbd0-50383065f2f7!
==== END logs for container storage-provisioner of pod kube-system/storage-provisioner ====
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/events",
        "resourceVersion": "11745"
    },
    "items": []
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/replicationcontrollers",
        "resourceVersion": "11745"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/services",
        "resourceVersion": "11745"
    },
    "items": [
        {
            "metadata": {
                "name": "kubernetes",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/services/kubernetes",
                "uid": "8d3c9a25-b4ae-4014-ada1-54648e4f0331",
                "resourceVersion": "157",
                "creationTimestamp": "2020-11-12T19:50:55Z",
                "labels": {
                    "component": "apiserver",
                    "provider": "kubernetes"
                },
                "managedFields": [
                    {
                        "manager": "kube-apiserver",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-11-12T19:50:55Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:labels": {
                                    ".": {},
                                    "f:component": {},
                                    "f:provider": {}
                                }
                            },
                            "f:spec": {
                                "f:clusterIP": {},
                                "f:ports": {
                                    ".": {},
                                    "k:{\"port\":443,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    }
                                },
                                "f:sessionAffinity": {},
                                "f:type": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "ports": [
                    {
                        "name": "https",
                        "protocol": "TCP",
                        "port": 443,
                        "targetPort": 8443
                    }
                ],
                "clusterIP": "10.96.0.1",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/daemonsets",
        "resourceVersion": "11745"
    },
    "items": []
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/deployments",
        "resourceVersion": "11745"
    },
    "items": []
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/replicasets",
        "resourceVersion": "11745"
    },
    "items": []
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/pods",
        "resourceVersion": "11745"
    },
    "items": []
}
